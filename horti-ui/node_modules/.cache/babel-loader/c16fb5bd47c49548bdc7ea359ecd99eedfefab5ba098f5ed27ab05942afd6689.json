{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { createVarsResolver, getFontSize, getRadius, factory, useProps, useStyles, Box, SimpleGrid } from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { isSameTime } from '../TimePicker/utils/is-same-time/is-same-time.mjs';\nimport { isTimeBefore, isTimeAfter } from './compare-time.mjs';\nimport { TimeGridProvider } from './TimeGrid.context.mjs';\nimport { TimeGridControl } from './TimeGridControl.mjs';\nimport classes from './TimeGrid.module.css.mjs';\nconst defaultProps = {\n  simpleGridProps: {\n    cols: 3,\n    spacing: \"xs\"\n  },\n  format: \"24h\",\n  amPmLabels: {\n    am: \"AM\",\n    pm: \"PM\"\n  }\n};\nconst varsResolver = createVarsResolver((_theme, {\n  size,\n  radius\n}) => ({\n  root: {\n    \"--time-grid-fz\": getFontSize(size),\n    \"--time-grid-radius\": getRadius(radius)\n  }\n}));\nconst TimeGrid = factory((_props, ref) => {\n  const props = useProps(\"TimeGrid\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    value,\n    defaultValue,\n    onChange,\n    format,\n    withSeconds = false,\n    amPmLabels,\n    allowDeselect,\n    simpleGridProps,\n    getControlProps,\n    minTime,\n    maxTime,\n    disableTime,\n    disabled,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"TimeGrid\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange\n  });\n  const controls = data.map(time => {\n    const isDisabled = disabled || !!minTime && isTimeBefore(time, minTime) || !!maxTime && isTimeAfter(time, maxTime) || (Array.isArray(disableTime) ? !!disableTime.find(t => isSameTime({\n      time,\n      compare: t,\n      withSeconds\n    })) : !!disableTime?.(time));\n    return /* @__PURE__ */jsx(TimeGridControl, {\n      active: isSameTime({\n        time,\n        compare: _value || \"\",\n        withSeconds\n      }),\n      time,\n      onClick: () => {\n        const nextValue = allowDeselect && (_value === null ? time === _value : isSameTime({\n          time,\n          compare: _value,\n          withSeconds\n        })) ? null : time;\n        nextValue !== _value && setValue(nextValue);\n      },\n      format,\n      amPmLabels,\n      disabled: isDisabled,\n      \"data-disabled\": isDisabled || void 0,\n      withSeconds,\n      ...getControlProps?.(time)\n    }, time);\n  });\n  return /* @__PURE__ */jsx(TimeGridProvider, {\n    value: {\n      getStyles\n    },\n    children: /* @__PURE__ */jsx(Box, {\n      ref,\n      ...getStyles(\"root\"),\n      ...others,\n      children: /* @__PURE__ */jsx(SimpleGrid, {\n        ...simpleGridProps,\n        ...getStyles(\"simpleGrid\", {\n          className: simpleGridProps?.className,\n          style: simpleGridProps?.style\n        }),\n        children: controls\n      })\n    })\n  });\n});\nTimeGrid.displayName = \"@mantine/dates/TimeGrid\";\nTimeGrid.classes = classes;\nexport { TimeGrid };","map":{"version":3,"names":["defaultProps","simpleGridProps","cols","spacing","format","amPmLabels","am","pm","varsResolver","createVarsResolver","_theme","size","radius","root","getFontSize","getRadius","TimeGrid","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","data","value","defaultValue","onChange","withSeconds","allowDeselect","getControlProps","minTime","maxTime","disableTime","disabled","others","getStyles","useStyles","name","classes","_value","setValue","useUncontrolled","finalValue","controls","map","time","isDisabled","isTimeBefore","isTimeAfter","Array","isArray","find","t","isSameTime","compare","jsx","TimeGridControl","active","onClick","nextValue","TimeGridProvider","children","Box","SimpleGrid","displayName"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimeGrid/TimeGrid.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  DataAttributes,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  getRadius,\n  MantineRadius,\n  MantineSize,\n  SimpleGrid,\n  SimpleGridProps,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport type { TimePickerAmPmLabels, TimePickerFormat } from '../TimePicker';\nimport { isSameTime } from '../TimePicker/utils/is-same-time/is-same-time';\nimport { isTimeAfter, isTimeBefore } from './compare-time';\nimport { TimeGridProvider } from './TimeGrid.context';\nimport { TimeGridControl } from './TimeGridControl';\nimport classes from './TimeGrid.module.css';\n\nexport type TimeGridStylesNames = 'root' | 'control' | 'simpleGrid';\nexport type TimeGridCssVariables = {\n  root: '--time-grid-fz' | '--time-grid-radius';\n};\n\nexport interface TimeGridProps\n  extends BoxProps,\n    StylesApiProps<TimeGridFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Time data in 24h format to be displayed in the grid, for example `['10:00', '18:30', '22:00']`. Time values must be unique. */\n  data: string[];\n\n  /** Controlled component value */\n  value?: string | null;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string | null;\n\n  /** Called when value changes */\n  onChange?: (value: string | null) => void;\n\n  /** Determines whether the value can be deselected when the current active option is clicked or activated with keyboard, `false` by default */\n  allowDeselect?: boolean;\n\n  /** Time format displayed in the grid, `'24h'` by default */\n  format?: TimePickerFormat;\n\n  /** Determines whether the seconds part should be displayed, `false` by default */\n  withSeconds?: boolean;\n\n  /** Labels used for am/pm values, `{ am: 'AM', pm: 'PM' }` by default */\n  amPmLabels?: TimePickerAmPmLabels;\n\n  /** Props passed down to the underlying `SimpleGrid` component, `{ cols: 3, spacing: 'xs' }` by default */\n  simpleGridProps?: SimpleGridProps;\n\n  /** A function to pass props down to control based on the time value */\n  getControlProps?: (time: string) => React.ComponentPropsWithoutRef<'button'> & DataAttributes;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Control `font-size` of controls, key of `theme.fontSizes` or any valid CSS value, `'sm'` by default */\n  size?: MantineSize;\n\n  /** All controls before this time are disabled */\n  minTime?: string;\n\n  /** All controls after this time are disabled */\n  maxTime?: string;\n\n  /** Array of time values to disable */\n  disableTime?: string[] | ((time: string) => boolean);\n\n  /** If set, all controls are disabled */\n  disabled?: boolean;\n}\n\nexport type TimeGridFactory = Factory<{\n  props: TimeGridProps;\n  ref: HTMLDivElement;\n  stylesNames: TimeGridStylesNames;\n  vars: TimeGridCssVariables;\n}>;\n\nconst defaultProps: Partial<TimeGridProps> = {\n  simpleGridProps: { cols: 3, spacing: 'xs' },\n  format: '24h',\n  amPmLabels: { am: 'AM', pm: 'PM' },\n};\n\nconst varsResolver = createVarsResolver<TimeGridFactory>((_theme, { size, radius }) => ({\n  root: {\n    '--time-grid-fz': getFontSize(size),\n    '--time-grid-radius': getRadius(radius),\n  },\n}));\n\nexport const TimeGrid = factory<TimeGridFactory>((_props, ref) => {\n  const props = useProps('TimeGrid', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    value,\n    defaultValue,\n    onChange,\n    format,\n    withSeconds = false,\n    amPmLabels,\n    allowDeselect,\n    simpleGridProps,\n    getControlProps,\n    minTime,\n    maxTime,\n    disableTime,\n    disabled,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TimeGridFactory>({\n    name: 'TimeGrid',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange,\n  });\n\n  const controls = data.map((time) => {\n    const isDisabled =\n      disabled ||\n      (!!minTime && isTimeBefore(time, minTime)) ||\n      (!!maxTime && isTimeAfter(time, maxTime)) ||\n      (Array.isArray(disableTime)\n        ? !!disableTime.find((t) => isSameTime({ time, compare: t, withSeconds }))\n        : !!disableTime?.(time));\n\n    return (\n      <TimeGridControl\n        key={time}\n        active={isSameTime({ time, compare: _value || '', withSeconds })}\n        time={time}\n        onClick={() => {\n          const nextValue =\n            allowDeselect &&\n            (_value === null ? time === _value : isSameTime({ time, compare: _value, withSeconds }))\n              ? null\n              : time;\n          nextValue !== _value && setValue(nextValue);\n        }}\n        format={format!}\n        amPmLabels={amPmLabels!}\n        disabled={isDisabled}\n        data-disabled={isDisabled || undefined}\n        withSeconds={withSeconds}\n        {...getControlProps?.(time)}\n      />\n    );\n  });\n\n  return (\n    <TimeGridProvider value={{ getStyles }}>\n      <Box ref={ref} {...getStyles('root')} {...others}>\n        <SimpleGrid\n          {...simpleGridProps}\n          {...getStyles('simpleGrid', {\n            className: simpleGridProps?.className,\n            style: simpleGridProps?.style,\n          })}\n        >\n          {controls}\n        </SimpleGrid>\n      </Box>\n    </TimeGridProvider>\n  );\n});\n\nTimeGrid.displayName = '@mantine/dates/TimeGrid';\nTimeGrid.classes = classes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}