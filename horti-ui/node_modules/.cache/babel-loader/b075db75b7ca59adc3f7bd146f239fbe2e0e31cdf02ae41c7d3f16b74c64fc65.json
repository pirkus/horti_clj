{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport cx from 'clsx';\nimport { factory, useInputProps, Input, Modal, Popover } from '@mantine/core';\nimport { HiddenDatesInput } from '../HiddenDatesInput/HiddenDatesInput.mjs';\nimport classes from './PickerInputBase.module.css.mjs';\nconst defaultProps = {};\nconst PickerInputBase = factory((_props, ref) => {\n  const {\n    inputProps,\n    wrapperProps,\n    placeholder,\n    classNames,\n    styles,\n    unstyled,\n    popoverProps,\n    modalProps,\n    dropdownType,\n    children,\n    formattedValue,\n    dropdownHandlers,\n    dropdownOpened,\n    onClick,\n    clearable,\n    onClear,\n    clearButtonProps,\n    rightSection,\n    shouldClear,\n    readOnly,\n    disabled,\n    value,\n    name,\n    form,\n    type,\n    onDropdownClose,\n    withTime,\n    ...others\n  } = useInputProps(\"PickerInputBase\", defaultProps, _props);\n  const clearButton = /* @__PURE__ */jsx(Input.ClearButton, {\n    onClick: onClear,\n    unstyled,\n    ...clearButtonProps\n  });\n  const handleClose = () => {\n    const isInvalidRangeValue = type === \"range\" && Array.isArray(value) && value[0] && !value[1];\n    if (isInvalidRangeValue) {\n      onClear();\n    }\n    dropdownHandlers.close();\n    onDropdownClose?.();\n  };\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [dropdownType === \"modal\" && !readOnly && /* @__PURE__ */jsx(Modal, {\n      opened: dropdownOpened,\n      onClose: handleClose,\n      withCloseButton: false,\n      size: \"auto\",\n      \"data-dates-modal\": true,\n      unstyled,\n      ...modalProps,\n      children\n    }), /* @__PURE__ */jsx(Input.Wrapper, {\n      ...wrapperProps,\n      children: /* @__PURE__ */jsxs(Popover, {\n        position: \"bottom-start\",\n        opened: dropdownOpened,\n        trapFocus: true,\n        returnFocus: false,\n        unstyled,\n        ...popoverProps,\n        disabled: popoverProps?.disabled || dropdownType === \"modal\" || readOnly,\n        onChange: _opened => {\n          if (!_opened) {\n            popoverProps?.onClose?.();\n            handleClose();\n          }\n        },\n        children: [/* @__PURE__ */jsx(Popover.Target, {\n          children: /* @__PURE__ */jsx(Input, {\n            \"data-dates-input\": true,\n            \"data-read-only\": readOnly || void 0,\n            disabled,\n            component: \"button\",\n            type: \"button\",\n            multiline: true,\n            onClick: event => {\n              onClick?.(event);\n              dropdownHandlers.toggle();\n            },\n            __clearSection: clearButton,\n            __clearable: clearable && shouldClear && !readOnly && !disabled,\n            rightSection,\n            ...inputProps,\n            ref,\n            classNames: {\n              ...classNames,\n              input: cx(classes.input, classNames?.input)\n            },\n            ...others,\n            children: formattedValue || /* @__PURE__ */jsx(Input.Placeholder, {\n              error: inputProps.error,\n              unstyled,\n              className: classNames?.placeholder,\n              style: styles?.placeholder,\n              children: placeholder\n            })\n          })\n        }), /* @__PURE__ */jsx(Popover.Dropdown, {\n          \"data-dates-dropdown\": true,\n          children\n        })]\n      })\n    }), /* @__PURE__ */jsx(HiddenDatesInput, {\n      value,\n      name,\n      form,\n      type,\n      withTime\n    })]\n  });\n});\nPickerInputBase.classes = classes;\nPickerInputBase.displayName = \"@mantine/dates/PickerInputBase\";\nexport { PickerInputBase };","map":{"version":3,"names":["defaultProps","PickerInputBase","factory","_props","ref","inputProps","wrapperProps","placeholder","classNames","styles","unstyled","popoverProps","modalProps","dropdownType","children","formattedValue","dropdownHandlers","dropdownOpened","onClick","clearable","onClear","clearButtonProps","rightSection","shouldClear","readOnly","disabled","value","name","form","type","onDropdownClose","withTime","others","useInputProps","clearButton","jsx","Input","ClearButton","handleClose","isInvalidRangeValue","Array","isArray","close","jsxs","Fragment","Modal","opened","onClose","withCloseButton","size","Wrapper","Popover","position","trapFocus","returnFocus","onChange","_opened","Target","component","multiline","event","toggle","__clearSection","__clearable","input","cx","classes","Placeholder","error","className","style","Dropdown","HiddenDatesInput","displayName"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/PickerInputBase/PickerInputBase.tsx"],"sourcesContent":["import cx from 'clsx';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  Input,\n  InputVariant,\n  MantineSize,\n  Modal,\n  ModalProps,\n  Popover,\n  PopoverProps,\n  StylesApiProps,\n  useInputProps,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { DatePickerType } from '../../types';\nimport { DateFormatter } from '../../utils';\nimport { HiddenDatesInput, HiddenDatesInputValue } from '../HiddenDatesInput';\nimport classes from './PickerInputBase.module.css';\n\nexport type PickerInputBaseStylesNames = __InputStylesNames;\n\nexport interface DateInputSharedProps\n  extends Omit<__BaseInputProps, 'size'>,\n    ElementProps<'button', 'defaultValue' | 'value' | 'onChange' | 'type'> {\n  /** Determines whether the dropdown is closed when date is selected, not applicable with `type=\"multiple\"`, `true` by default */\n  closeOnChange?: boolean;\n\n  /** Type of the dropdown, `'popover'` by default */\n  dropdownType?: 'popover' | 'modal';\n\n  /** Props passed down to `Popover` component */\n  popoverProps?: Partial<Omit<PopoverProps, 'children'>>;\n\n  /** Props passed down to `Modal` component */\n  modalProps?: Partial<Omit<ModalProps, 'children'>>;\n\n  /** If set, clear button is displayed in the `rightSection` when the component has value. Ignored if `rightSection` prop is set. `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** If set, the component value cannot be changed by the user */\n  readOnly?: boolean;\n\n  /** Determines whether dates values should be sorted before `onChange` call, only applicable with type=\"multiple\", `true` by default */\n  sortDates?: boolean;\n\n  /** Separator between range value */\n  labelSeparator?: string;\n\n  /** Input placeholder */\n  placeholder?: string;\n\n  /** A function to format selected dates values into a string. By default, date is formatted based on the input type. */\n  valueFormatter?: DateFormatter;\n\n  /** Called when the dropdown is closed */\n  onDropdownClose?: () => void;\n}\n\nexport interface PickerInputBaseProps\n  extends BoxProps,\n    DateInputSharedProps,\n    Omit<StylesApiProps<PickerInputBaseFactory>, 'classNames' | 'styles'> {\n  classNames?: Partial<Record<string, string>>;\n  styles?: Partial<Record<string, React.CSSProperties>>;\n  __staticSelector?: string;\n  children: React.ReactNode;\n  formattedValue: string | null | undefined;\n  dropdownHandlers: ReturnType<typeof useDisclosure>[1];\n  dropdownOpened: boolean;\n  onClear: () => void;\n  shouldClear: boolean;\n  value: HiddenDatesInputValue;\n  type: DatePickerType;\n  size?: MantineSize;\n  withTime?: boolean;\n}\n\nexport type PickerInputBaseFactory = Factory<{\n  props: PickerInputBaseProps;\n  ref: HTMLButtonElement;\n  stylesNames: PickerInputBaseStylesNames;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<PickerInputBaseProps> = {};\n\nexport const PickerInputBase = factory<PickerInputBaseFactory>((_props, ref) => {\n  const {\n    inputProps,\n    wrapperProps,\n    placeholder,\n    classNames,\n    styles,\n    unstyled,\n    popoverProps,\n    modalProps,\n    dropdownType,\n    children,\n    formattedValue,\n    dropdownHandlers,\n    dropdownOpened,\n    onClick,\n    clearable,\n    onClear,\n    clearButtonProps,\n    rightSection,\n    shouldClear,\n    readOnly,\n    disabled,\n    value,\n    name,\n    form,\n    type,\n    onDropdownClose,\n    withTime,\n    ...others\n  } = useInputProps('PickerInputBase', defaultProps, _props);\n\n  const clearButton = (\n    <Input.ClearButton onClick={onClear} unstyled={unstyled} {...clearButtonProps} />\n  );\n\n  const handleClose = () => {\n    const isInvalidRangeValue = type === 'range' && Array.isArray(value) && value[0] && !value[1];\n    if (isInvalidRangeValue) {\n      onClear();\n    }\n\n    dropdownHandlers.close();\n    onDropdownClose?.();\n  };\n\n  return (\n    <>\n      {dropdownType === 'modal' && !readOnly && (\n        <Modal\n          opened={dropdownOpened}\n          onClose={handleClose}\n          withCloseButton={false}\n          size=\"auto\"\n          data-dates-modal\n          unstyled={unstyled}\n          {...modalProps}\n        >\n          {children}\n        </Modal>\n      )}\n\n      <Input.Wrapper {...wrapperProps}>\n        <Popover\n          position=\"bottom-start\"\n          opened={dropdownOpened}\n          trapFocus\n          returnFocus={false}\n          unstyled={unstyled}\n          {...popoverProps}\n          disabled={popoverProps?.disabled || dropdownType === 'modal' || readOnly}\n          onChange={(_opened) => {\n            if (!_opened) {\n              popoverProps?.onClose?.();\n              handleClose();\n            }\n          }}\n        >\n          <Popover.Target>\n            <Input\n              data-dates-input\n              data-read-only={readOnly || undefined}\n              disabled={disabled}\n              component=\"button\"\n              type=\"button\"\n              multiline\n              onClick={(event) => {\n                onClick?.(event);\n                dropdownHandlers.toggle();\n              }}\n              __clearSection={clearButton}\n              __clearable={clearable && shouldClear && !readOnly && !disabled}\n              rightSection={rightSection}\n              {...inputProps}\n              ref={ref}\n              classNames={{ ...classNames, input: cx(classes.input, (classNames as any)?.input) }}\n              {...others}\n            >\n              {formattedValue || (\n                <Input.Placeholder\n                  error={inputProps.error}\n                  unstyled={unstyled}\n                  className={(classNames as any)?.placeholder}\n                  style={(styles as any)?.placeholder}\n                >\n                  {placeholder}\n                </Input.Placeholder>\n              )}\n            </Input>\n          </Popover.Target>\n\n          <Popover.Dropdown data-dates-dropdown>{children}</Popover.Dropdown>\n        </Popover>\n      </Input.Wrapper>\n      <HiddenDatesInput value={value} name={name} form={form} type={type} withTime={withTime} />\n    </>\n  );\n});\n\nPickerInputBase.classes = classes;\nPickerInputBase.displayName = '@mantine/dates/PickerInputBase';\n"],"mappings":";;;;;;;AA4FA,MAAMA,YAAA,GAA8C,CAAC;AAE9C,MAAMC,eAAkB,GAAAC,OAAA,CAAgC,CAACC,MAAA,EAAQC,GAAQ;EACxE;IACJC,UAAA;IACAC,YAAA;IACAC,WAAA;IACAC,UAAA;IACAC,MAAA;IACAC,QAAA;IACAC,YAAA;IACAC,UAAA;IACAC,YAAA;IACAC,QAAA;IACAC,cAAA;IACAC,gBAAA;IACAC,cAAA;IACAC,OAAA;IACAC,SAAA;IACAC,OAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,WAAA;IACAC,QAAA;IACAC,QAAA;IACAC,KAAA;IACAC,IAAA;IACAC,IAAA;IACAC,IAAA;IACAC,eAAA;IACAC,QAAA;IACA,GAAGC;EACD,IAAAC,aAAA,CAAc,iBAAmB,EAAAjC,YAAA,EAAcG,MAAM;EAEnD,MAAA+B,WAAA,kBAAAC,GAAA,CACHC,KAAM,CAAAC,WAAA,EAAN;IAAkBnB,OAAS,EAAAE,OAAA;IAASV,QAAqB;IAAA,GAAGW;EAAkB;EAGjF,MAAMiB,WAAA,GAAcA,CAAA,KAAM;IACxB,MAAMC,mBAAsB,GAAAV,IAAA,KAAS,OAAW,IAAAW,KAAA,CAAMC,OAAQ,CAAAf,KAAK,CAAK,IAAAA,KAAA,CAAM,CAAC,KAAK,CAACA,KAAA,CAAM,CAAC;IAC5F,IAAIa,mBAAqB;MACfnB,OAAA;IAAA;IAGVJ,gBAAA,CAAiB0B,KAAM;IACLZ,eAAA;EACpB;EAEA,sBAEKa,IAAA,CAAAC,QAAA;IAAA9B,QAAA,GAAiBD,YAAA,gBAAW,CAACW,QAC5B,mBAAAW,GAAA,CAACU,KAAA;MACCC,MAAQ,EAAA7B,cAAA;MACR8B,OAAS,EAAAT,WAAA;MACTU,eAAiB;MACjBC,IAAK;MACL,kBAAgB;MAChBvC,QAAA;MACC,GAAGE,UAAA;MAEHE;IAAA,CACH,kBAGDqB,GAAA,CAAAC,KAAA,CAAMc,OAAN;MAAe,GAAG5C,YACjB;MAAAQ,QAAA,iBAAA6B,IAAA,CAACQ,OAAA;QACCC,QAAS;QACTN,MAAQ,EAAA7B,cAAA;QACRoC,SAAS;QACTC,WAAa;QACb5C,QAAA;QACC,GAAGC,YAAA;QACJc,QAAU,EAAAd,YAAA,EAAcc,QAAY,IAAAZ,YAAA,KAAiB,OAAW,IAAAW,QAAA;QAChE+B,QAAA,EAAWC,OAAY;UACrB,IAAI,CAACA,OAAS;YACZ7C,YAAA,EAAcoC,OAAU;YACZT,WAAA;UAAA;QAEhB;QAEAxB,QAAA,GAAC,eAAAqB,GAAA,CAAAgB,OAAA,CAAQM,MAAA,EAAR;UACC3C,QAAA,iBAAAqB,GAAA,CAACC,KAAA;YACC,kBAAgB;YAChB,kBAAgBZ,QAAY;YAC5BC,QAAA;YACAiC,SAAU;YACV7B,IAAK;YACL8B,SAAS;YACTzC,OAAA,EAAU0C,KAAU;cAClB1C,OAAA,GAAU0C,KAAK;cACf5C,gBAAA,CAAiB6C,MAAO;YAC1B;YACAC,cAAgB,EAAA5B,WAAA;YAChB6B,WAAa,EAAA5C,SAAA,IAAaI,WAAe,KAACC,QAAA,IAAY,CAACC,QAAA;YACvDH,YAAA;YACC,GAAGjB,UAAA;YACJD,GAAA;YACAI,UAAA,EAAY;cAAE,GAAGA,UAAY;cAAAwD,KAAA,EAAOC,EAAA,CAAGC,OAAQ,CAAAF,KAAA,EAAQxD,UAAoB,EAAAwD,KAAK;YAAE;YACjF,GAAGhC,MAAA;YAEHlB,QACC,EAAAC,cAAA,mBAAAoB,GAAA,CAACC,KAAM,CAAA+B,WAAA,EAAN;cACCC,KAAA,EAAO/D,UAAW,CAAA+D,KAAA;cAClB1D,QAAA;cACA2D,SAAA,EAAY7D,UAAoB,EAAAD,WAAA;cAChC+D,KAAA,EAAQ7D,MAAgB,EAAAF,WAAA;cAEvBO,QAAA,EAAAP;YAAA;UACH;QAGN,mBAAA4B,GAAA,CAECgB,OAAQ,CAAAoB,QAAA,EAAR;UAAiB,uBAAmB;UAAEzD;QAAS;MAAA;IAEpD,mBAAAqB,GAAA,CACCqC,gBAAiB;MAAA9C,KAAA;MAAcC,IAAY;MAAAC,IAAA;MAAYC,IAAA;MAAYE;IAAoB;EAC1F;AAEJ,CAAC;AAED9B,eAAA,CAAgBiE,OAAU,GAAAA,OAAA;AAC1BjE,eAAA,CAAgBwE,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}