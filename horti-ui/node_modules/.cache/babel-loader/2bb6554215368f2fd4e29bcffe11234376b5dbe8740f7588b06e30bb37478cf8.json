{"ast":null,"code":"'use client';\n\nconst keyNameMap = {\n  \" \": \"space\",\n  ArrowLeft: \"arrowleft\",\n  ArrowRight: \"arrowright\",\n  ArrowUp: \"arrowup\",\n  ArrowDown: \"arrowdown\",\n  Escape: \"esc\",\n  Esc: \"esc\",\n  Enter: \"enter\",\n  Tab: \"tab\",\n  Backspace: \"backspace\",\n  Delete: \"delete\",\n  Insert: \"insert\",\n  Home: \"home\",\n  End: \"end\",\n  PageUp: \"pageup\",\n  PageDown: \"pagedown\",\n  \"+\": \"plus\",\n  \"-\": \"minus\",\n  \"*\": \"asterisk\",\n  \"/\": \"slash\"\n};\nfunction normalizeKey(key) {\n  const lowerKey = key.replace(\"Key\", \"\").toLowerCase();\n  return keyNameMap[key] || lowerKey;\n}\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\"),\n    plus: keys.includes(\"[plus]\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return {\n    ...modifiers,\n    key: freeKey === \"[plus]\" ? \"+\" : freeKey\n  };\n}\nfunction isExactHotkey(hotkey, event, usePhysicalKeys) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey,\n    code: pressedCode\n  } = event;\n  if (alt !== altKey) {\n    return false;\n  }\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n  if (key && (usePhysicalKeys ? normalizeKey(pressedCode) === normalizeKey(key) : normalizeKey(pressedKey ?? pressedCode) === normalizeKey(key))) {\n    return true;\n  }\n  return false;\n}\nfunction getHotkeyMatcher(hotkey, usePhysicalKeys) {\n  return event => isExactHotkey(parseHotkey(hotkey), event, usePhysicalKeys);\n}\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    const _event = \"nativeEvent\" in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler, options = {\n      preventDefault: true,\n      usePhysicalKeys: false\n    }]) => {\n      if (getHotkeyMatcher(hotkey, options.usePhysicalKeys)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n        handler(_event);\n      }\n    });\n  };\n}\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"names":["keyNameMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Escape","Esc","Enter","Tab","Backspace","Delete","Insert","Home","End","PageUp","PageDown","normalizeKey","key","lowerKey","replace","toLowerCase","parseHotkey","hotkey","keys","split","map","part","trim","modifiers","alt","includes","ctrl","meta","mod","shift","plus","reservedKeys","freeKey","find","isExactHotkey","event","usePhysicalKeys","altKey","ctrlKey","metaKey","shiftKey","pressedKey","code","pressedCode","getHotkeyMatcher","getHotkeyHandler","hotkeys","_event","nativeEvent","forEach","handler","options","preventDefault"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/hooks/src/use-hotkeys/parse-hotkey.ts"],"sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n  plus: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nconst keyNameMap: Record<string, string> = {\n  ' ': 'space',\n  ArrowLeft: 'arrowleft',\n  ArrowRight: 'arrowright',\n  ArrowUp: 'arrowup',\n  ArrowDown: 'arrowdown',\n  Escape: 'esc',\n  Esc: 'esc',\n  Enter: 'enter',\n  Tab: 'tab',\n  Backspace: 'backspace',\n  Delete: 'delete',\n  Insert: 'insert',\n  Home: 'home',\n  End: 'end',\n  PageUp: 'pageup',\n  PageDown: 'pagedown',\n  '+': 'plus',\n  '-': 'minus',\n  '*': 'asterisk',\n  '/': 'slash',\n};\n\nfunction normalizeKey(key: string): string {\n  const lowerKey = key.replace('Key', '').toLowerCase();\n  return keyNameMap[key] || lowerKey;\n}\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n    plus: keys.includes('[plus]'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey === '[plus]' ? '+' : freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent, usePhysicalKeys?: boolean): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey, code: pressedCode } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (usePhysicalKeys\n      ? normalizeKey(pressedCode) === normalizeKey(key)\n      : normalizeKey(pressedKey ?? pressedCode) === normalizeKey(key))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string, usePhysicalKeys?: boolean): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event, usePhysicalKeys);\n}\n\nexport interface HotkeyItemOptions {\n  preventDefault?: boolean;\n  usePhysicalKeys?: boolean;\n}\n\ntype HotkeyItem = [string, (event: any) => void, HotkeyItemOptions?];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {\n    const _event = 'nativeEvent' in event ? event.nativeEvent : event;\n    hotkeys.forEach(\n      ([hotkey, handler, options = { preventDefault: true, usePhysicalKeys: false }]) => {\n        if (getHotkeyMatcher(hotkey, options.usePhysicalKeys)(_event)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(_event);\n        }\n      }\n    );\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}