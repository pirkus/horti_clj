{"ast":null,"code":"var _jsxFileName = \"/home/filken/dev/horti_clj/horti-ui/src/components/GardenCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport { Box, Paper, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Grid, FormControl, InputLabel, Select, MenuItem, Fab, Chip, Alert } from '@mui/material';\nimport { Add as AddIcon, Analytics as MetricsIcon, Timeline as ViewMetricsIcon } from '@mui/icons-material';\nimport { UserContext } from '../contexts/UserContext';\nimport MetricsViewer from './MetricsViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GardenCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [plants, setPlants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlant, setSelectedPlant] = useState(null);\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showMetrics, setShowMetrics] = useState(false);\n  const [showMetricsViewer, setShowMetricsViewer] = useState(false);\n  const [canvasSize] = useState({\n    width: 800,\n    height: 600\n  });\n\n  // Enhanced drag state with threshold detection\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedPlant, setDraggedPlant] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [mouseDownPos, setMouseDownPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [mouseDownPlant, setMouseDownPlant] = useState(null);\n  const [hasDraggedBeyondThreshold, setHasDraggedBeyondThreshold] = useState(false);\n  const DRAG_THRESHOLD = 5; // pixels\n\n  const [newPlant, setNewPlant] = useState({\n    name: '',\n    species: '',\n    imageUrl: '',\n    x: 0,\n    y: 0\n  });\n  const [newMetrics, setNewMetrics] = useState({\n    date: new Date().toISOString().split('T')[0],\n    ec: '',\n    ph: '',\n    temperature: '',\n    humidity: '',\n    notes: ''\n  });\n  const {\n    token\n  } = useContext(UserContext);\n  const defaultPlantImages = [{\n    name: 'Tomato',\n    url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🍅'\n  }, {\n    name: 'Lettuce',\n    url: 'https://via.placeholder.com/50x50/66bb6a/ffffff?text=🥬'\n  }, {\n    name: 'Basil',\n    url: 'https://via.placeholder.com/50x50/8bc34a/ffffff?text=🌿'\n  }, {\n    name: 'Pepper',\n    url: 'https://via.placeholder.com/50x50/ff7043/ffffff?text=🌶️'\n  }, {\n    name: 'Spinach',\n    url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🥬'\n  }];\n  const fetchPlants = useCallback(async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPlants(data);\n      } else {\n        setError('Failed to fetch plants');\n      }\n    } catch (err) {\n      setError('Error connecting to server');\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (token) {\n      fetchPlants();\n    }\n  }, [token, fetchPlants]);\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.fillStyle = '#f1f8e9';\n    ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n\n    // Draw grid\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= canvasSize.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvasSize.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= canvasSize.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvasSize.width, y);\n      ctx.stroke();\n    }\n\n    // Draw plants\n    plants.forEach(plant => {\n      if (plant.x !== undefined && plant.y !== undefined) {\n        // Highlight dragged plant\n        const isBeingDragged = (draggedPlant === null || draggedPlant === void 0 ? void 0 : draggedPlant.id) === plant.id;\n        const isSelected = (selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.id) === plant.id;\n\n        // Draw plant circle with different colors for different states\n        if (isBeingDragged) {\n          ctx.fillStyle = '#2196f3'; // Blue when dragging\n        } else if (isSelected) {\n          ctx.fillStyle = '#ff9800'; // Orange when selected\n        } else {\n          ctx.fillStyle = '#4caf50'; // Green normally\n        }\n        ctx.beginPath();\n        ctx.arc(plant.x, plant.y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n\n        // Draw plant name\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(plant.name, plant.x, plant.y + 4);\n\n        // Draw drag indicator for dragged plant\n        if (isBeingDragged) {\n          ctx.strokeStyle = '#1976d2';\n          ctx.lineWidth = 2;\n          ctx.setLineDash([5, 5]);\n          ctx.beginPath();\n          ctx.arc(plant.x, plant.y, 30, 0, 2 * Math.PI);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n    });\n  }, [plants, selectedPlant, draggedPlant, canvasSize.width, canvasSize.height]);\n  useEffect(() => {\n    if (!loading) {\n      drawCanvas();\n    }\n  }, [loading, drawCanvas]);\n  const getMousePos = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  };\n  const findPlantAtPosition = (x, y) => {\n    return plants.find(plant => {\n      const distance = Math.sqrt((x - plant.x) ** 2 + (y - plant.y) ** 2);\n      return distance <= 25;\n    });\n  };\n  const updatePlantPosition = async (plantId, newX, newY) => {\n    try {\n      const response = await fetch(`/api/plants/${plantId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          x: newX,\n          y: newY\n        })\n      });\n      if (response.ok) {\n        // Update local state\n        setPlants(prev => prev.map(plant => plant.id === plantId ? {\n          ...plant,\n          x: newX,\n          y: newY\n        } : plant));\n      } else {\n        setError('Failed to update plant position');\n        // Revert to original position by refetching\n        fetchPlants();\n      }\n    } catch (err) {\n      setError('Error updating plant position');\n      fetchPlants();\n    }\n  };\n  const handleMouseDown = event => {\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n    if (clickedPlant) {\n      // Track initial mouse position and clicked plant for potential drag\n      setMouseDownPos(mousePos);\n      setMouseDownPlant(clickedPlant);\n      setDragOffset({\n        x: mousePos.x - clickedPlant.x,\n        y: mousePos.y - clickedPlant.y\n      });\n\n      // Change cursor to indicate potential drag\n      const canvas = canvasRef.current;\n      canvas.style.cursor = 'grabbing';\n    }\n  };\n  const handleMouseMove = event => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    if (mouseDownPlant && !isDragging) {\n      // Check if we've moved beyond the drag threshold\n      const distance = Math.sqrt(Math.pow(mousePos.x - mouseDownPos.x, 2) + Math.pow(mousePos.y - mouseDownPos.y, 2));\n      if (distance > DRAG_THRESHOLD) {\n        // Start actual dragging\n        setIsDragging(true);\n        setDraggedPlant(mouseDownPlant);\n        setHasDraggedBeyondThreshold(true);\n      }\n    }\n    if (isDragging && draggedPlant) {\n      // Update plant position in real-time during drag\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n\n      // Update local state for immediate visual feedback\n      setPlants(prev => prev.map(plant => plant.id === draggedPlant.id ? {\n        ...plant,\n        x: newX,\n        y: newY\n      } : plant));\n    } else if (!mouseDownPlant) {\n      // Update cursor based on what's under the mouse\n      const plantUnderMouse = findPlantAtPosition(mousePos.x, mousePos.y);\n      canvas.style.cursor = plantUnderMouse ? 'grab' : 'crosshair';\n    }\n  };\n  const handleMouseUp = async event => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    if (isDragging && draggedPlant) {\n      // Handle end of drag - save position to backend\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      await updatePlantPosition(draggedPlant.id, newX, newY);\n    } else if (mouseDownPlant && !hasDraggedBeyondThreshold) {\n      // This was a click, not a drag - open metrics dialog\n      setSelectedPlant(mouseDownPlant);\n      setShowMetrics(true);\n    }\n\n    // Reset all drag-related state\n    setIsDragging(false);\n    setDraggedPlant(null);\n    setMouseDownPlant(null);\n    setHasDraggedBeyondThreshold(false);\n    setDragOffset({\n      x: 0,\n      y: 0\n    });\n    setMouseDownPos({\n      x: 0,\n      y: 0\n    });\n    canvas.style.cursor = 'crosshair';\n  };\n  const handleCanvasClick = event => {\n    // Only handle clicks for adding new plants in empty space\n    // Plant clicks are now handled in handleMouseUp\n    if (isDragging || mouseDownPlant) return;\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n    if (!clickedPlant) {\n      // Add new plant at clicked position (empty space)\n      setNewPlant(prev => ({\n        ...prev,\n        x: mousePos.x,\n        y: mousePos.y\n      }));\n      setShowAddPlant(true);\n    }\n  };\n  const handleAddPlant = async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: newPlant.name,\n          species: newPlant.species,\n          x: newPlant.x,\n          y: newPlant.y,\n          'image-url': newPlant.imageUrl,\n          'planting-date': new Date().toISOString().split('T')[0]\n        })\n      });\n      if (response.ok) {\n        setShowAddPlant(false);\n        setNewPlant({\n          name: '',\n          species: '',\n          imageUrl: '',\n          x: 0,\n          y: 0\n        });\n        fetchPlants();\n      } else {\n        setError('Failed to add plant');\n      }\n    } catch (err) {\n      setError('Error adding plant');\n    }\n  };\n  const handleAddMetrics = async () => {\n    if (!selectedPlant) return;\n    try {\n      const response = await fetch(`/api/plants/${selectedPlant.id}/metrics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          'plant-id': selectedPlant.id,\n          date: newMetrics.date,\n          ec: parseFloat(newMetrics.ec) || null,\n          ph: parseFloat(newMetrics.ph) || null,\n          temperature: parseFloat(newMetrics.temperature) || null,\n          humidity: parseFloat(newMetrics.humidity) || null,\n          notes: newMetrics.notes\n        })\n      });\n      if (response.ok) {\n        setShowMetrics(false);\n        setNewMetrics({\n          date: new Date().toISOString().split('T')[0],\n          ec: '',\n          ph: '',\n          temperature: '',\n          humidity: '',\n          notes: ''\n        });\n        setSelectedPlant(null);\n      } else {\n        setError('Failed to add metrics');\n      }\n    } catch (err) {\n      setError('Error adding metrics');\n    }\n  };\n  const handleViewMetrics = () => {\n    setShowMetrics(false);\n    setShowMetricsViewer(true);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(Typography, {\n    children: \"Loading garden...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        sx: {\n          color: 'primary.dark'\n        },\n        children: \"\\uD83C\\uDF31 Interactive Garden Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        children: \"Click anywhere to add a plant, drag plants to move them, or click on existing plants to log daily metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Chip, {\n          label: \"\\uD83D\\uDCA1 Click empty space to add plants\",\n          variant: \"outlined\",\n          sx: {\n            mr: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: \"\\uD83D\\uDDB1\\uFE0F Drag plants to move them around\",\n          variant: \"outlined\",\n          sx: {\n            mr: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: \"\\uD83D\\uDCCA Click plants to log EC, pH, temp, humidity\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 2,\n        display: 'inline-block'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: canvasSize.width,\n        height: canvasSize.height,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onClick: handleCanvasClick,\n        style: {\n          border: '2px solid #4caf50',\n          borderRadius: '8px',\n          cursor: 'crosshair',\n          backgroundColor: '#f1f8e9'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showAddPlant,\n      onClose: () => setShowAddPlant(false),\n      maxWidth: \"sm\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Add Plant at (\", Math.round(newPlant.x), \", \", Math.round(newPlant.y), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          autoFocus: true,\n          margin: \"dense\",\n          label: \"Plant Name\",\n          fullWidth: true,\n          variant: \"outlined\",\n          value: newPlant.name,\n          onChange: e => setNewPlant({\n            ...newPlant,\n            name: e.target.value\n          }),\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          label: \"Species\",\n          fullWidth: true,\n          variant: \"outlined\",\n          value: newPlant.species,\n          onChange: e => setNewPlant({\n            ...newPlant,\n            species: e.target.value\n          }),\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Plant Type (optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: newPlant.imageUrl,\n            onChange: e => setNewPlant({\n              ...newPlant,\n              imageUrl: e.target.value\n            }),\n            children: defaultPlantImages.map((img, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: img.url,\n              children: img.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowAddPlant(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddPlant,\n          variant: \"contained\",\n          children: \"Add Plant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showMetrics,\n      onClose: () => setShowMetrics(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Log Daily Metrics - \", selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.name, /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: [\"Position: (\", selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.x, \", \", selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.y, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"Date\",\n              type: \"date\",\n              fullWidth: true,\n              variant: \"outlined\",\n              InputLabelProps: {\n                shrink: true\n              },\n              value: newMetrics.date,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                date: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"EC (Electrical Conductivity)\",\n              fullWidth: true,\n              variant: \"outlined\",\n              placeholder: \"e.g., 1.2\",\n              value: newMetrics.ec,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                ec: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"pH Level\",\n              fullWidth: true,\n              variant: \"outlined\",\n              placeholder: \"e.g., 6.5\",\n              value: newMetrics.ph,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                ph: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"Temperature (\\xB0C)\",\n              fullWidth: true,\n              variant: \"outlined\",\n              placeholder: \"e.g., 24\",\n              value: newMetrics.temperature,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                temperature: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"Humidity (%)\",\n              fullWidth: true,\n              variant: \"outlined\",\n              placeholder: \"e.g., 65\",\n              value: newMetrics.humidity,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                humidity: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              margin: \"dense\",\n              label: \"Notes\",\n              fullWidth: true,\n              multiline: true,\n              rows: 3,\n              variant: \"outlined\",\n              placeholder: \"Any observations about the plant today...\",\n              value: newMetrics.notes,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                notes: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowMetrics(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleViewMetrics,\n          variant: \"outlined\",\n          startIcon: /*#__PURE__*/_jsxDEV(ViewMetricsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 77\n          }, this),\n          children: \"View Metrics History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddMetrics,\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(MetricsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 77\n          }, this),\n          children: \"Log Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n};\n_s(GardenCanvas, \"OvMUtD1gZcG46bbjnGyv6Unpmsk=\");\n_c = GardenCanvas;\nexport default GardenCanvas;\nvar _c;\n$RefreshReg$(_c, \"GardenCanvas\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","useCallback","Box","Paper","Typography","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","Grid","FormControl","InputLabel","Select","MenuItem","Fab","Chip","Alert","Add","AddIcon","Analytics","MetricsIcon","Timeline","ViewMetricsIcon","UserContext","MetricsViewer","jsxDEV","_jsxDEV","GardenCanvas","_s","canvasRef","plants","setPlants","loading","setLoading","error","setError","selectedPlant","setSelectedPlant","showAddPlant","setShowAddPlant","showMetrics","setShowMetrics","showMetricsViewer","setShowMetricsViewer","canvasSize","width","height","isDragging","setIsDragging","draggedPlant","setDraggedPlant","dragOffset","setDragOffset","x","y","mouseDownPos","setMouseDownPos","mouseDownPlant","setMouseDownPlant","hasDraggedBeyondThreshold","setHasDraggedBeyondThreshold","DRAG_THRESHOLD","newPlant","setNewPlant","name","species","imageUrl","newMetrics","setNewMetrics","date","Date","toISOString","split","ec","ph","temperature","humidity","notes","token","defaultPlantImages","url","fetchPlants","response","fetch","headers","ok","data","json","err","drawCanvas","canvas","current","ctx","getContext","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","forEach","plant","undefined","isBeingDragged","id","isSelected","arc","Math","PI","fill","font","textAlign","fillText","setLineDash","getMousePos","event","rect","getBoundingClientRect","clientX","left","clientY","top","findPlantAtPosition","find","distance","sqrt","updatePlantPosition","plantId","newX","newY","method","body","JSON","stringify","prev","map","handleMouseDown","mousePos","clickedPlant","style","cursor","handleMouseMove","pow","max","min","plantUnderMouse","handleMouseUp","handleCanvasClick","handleAddPlant","handleAddMetrics","parseFloat","handleViewMetrics","children","fileName","_jsxFileName","lineNumber","columnNumber","elevation","sx","p","mb","variant","component","gutterBottom","color","mt","label","mr","severity","display","ref","onMouseDown","onMouseMove","onMouseUp","onClick","border","borderRadius","backgroundColor","open","onClose","maxWidth","fullWidth","round","autoFocus","margin","value","onChange","e","target","img","index","container","spacing","item","xs","sm","type","InputLabelProps","shrink","placeholder","multiline","rows","startIcon","_c","$RefreshReg$"],"sources":["/home/filken/dev/horti_clj/horti-ui/src/components/GardenCanvas.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Fab,\n  Chip,\n  Alert,\n} from '@mui/material';\nimport { Add as AddIcon, Analytics as MetricsIcon, Timeline as ViewMetricsIcon } from '@mui/icons-material';\nimport { UserContext } from '../contexts/UserContext';\nimport MetricsViewer from './MetricsViewer';\n\nconst GardenCanvas = () => {\n  const canvasRef = useRef(null);\n  const [plants, setPlants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlant, setSelectedPlant] = useState(null);\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showMetrics, setShowMetrics] = useState(false);\n  const [showMetricsViewer, setShowMetricsViewer] = useState(false);\n  const [canvasSize] = useState({ width: 800, height: 600 });\n  \n  // Enhanced drag state with threshold detection\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedPlant, setDraggedPlant] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [mouseDownPos, setMouseDownPos] = useState({ x: 0, y: 0 });\n  const [mouseDownPlant, setMouseDownPlant] = useState(null);\n  const [hasDraggedBeyondThreshold, setHasDraggedBeyondThreshold] = useState(false);\n  \n  const DRAG_THRESHOLD = 5; // pixels\n\n  const [newPlant, setNewPlant] = useState({\n    name: '',\n    species: '',\n    imageUrl: '',\n    x: 0,\n    y: 0\n  });\n\n  const [newMetrics, setNewMetrics] = useState({\n    date: new Date().toISOString().split('T')[0],\n    ec: '',\n    ph: '',\n    temperature: '',\n    humidity: '',\n    notes: ''\n  });\n\n  const { token } = useContext(UserContext);\n\n  const defaultPlantImages = [\n    { name: 'Tomato', url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🍅' },\n    { name: 'Lettuce', url: 'https://via.placeholder.com/50x50/66bb6a/ffffff?text=🥬' },\n    { name: 'Basil', url: 'https://via.placeholder.com/50x50/8bc34a/ffffff?text=🌿' },\n    { name: 'Pepper', url: 'https://via.placeholder.com/50x50/ff7043/ffffff?text=🌶️' },\n    { name: 'Spinach', url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🥬' },\n  ];\n\n  const fetchPlants = useCallback(async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setPlants(data);\n      } else {\n        setError('Failed to fetch plants');\n      }\n    } catch (err) {\n      setError('Error connecting to server');\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (token) {\n      fetchPlants();\n    }\n  }, [token, fetchPlants]);\n\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.fillStyle = '#f1f8e9';\n    ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n    \n    // Draw grid\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= canvasSize.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvasSize.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= canvasSize.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvasSize.width, y);\n      ctx.stroke();\n    }\n\n    // Draw plants\n    plants.forEach(plant => {\n      if (plant.x !== undefined && plant.y !== undefined) {\n        // Highlight dragged plant\n        const isBeingDragged = draggedPlant?.id === plant.id;\n        const isSelected = selectedPlant?.id === plant.id;\n        \n        // Draw plant circle with different colors for different states\n        if (isBeingDragged) {\n          ctx.fillStyle = '#2196f3'; // Blue when dragging\n        } else if (isSelected) {\n          ctx.fillStyle = '#ff9800'; // Orange when selected\n        } else {\n          ctx.fillStyle = '#4caf50'; // Green normally\n        }\n        \n        ctx.beginPath();\n        ctx.arc(plant.x, plant.y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        \n        // Draw plant name\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(plant.name, plant.x, plant.y + 4);\n        \n        // Draw drag indicator for dragged plant\n        if (isBeingDragged) {\n          ctx.strokeStyle = '#1976d2';\n          ctx.lineWidth = 2;\n          ctx.setLineDash([5, 5]);\n          ctx.beginPath();\n          ctx.arc(plant.x, plant.y, 30, 0, 2 * Math.PI);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n    });\n  }, [plants, selectedPlant, draggedPlant, canvasSize.width, canvasSize.height]);\n\n  useEffect(() => {\n    if (!loading) {\n      drawCanvas();\n    }\n  }, [loading, drawCanvas]);\n\n  const getMousePos = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  };\n\n  const findPlantAtPosition = (x, y) => {\n    return plants.find(plant => {\n      const distance = Math.sqrt((x - plant.x) ** 2 + (y - plant.y) ** 2);\n      return distance <= 25;\n    });\n  };\n\n  const updatePlantPosition = async (plantId, newX, newY) => {\n    try {\n      const response = await fetch(`/api/plants/${plantId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ x: newX, y: newY }),\n      });\n\n      if (response.ok) {\n        // Update local state\n        setPlants(prev => prev.map(plant => \n          plant.id === plantId \n            ? { ...plant, x: newX, y: newY }\n            : plant\n        ));\n      } else {\n        setError('Failed to update plant position');\n        // Revert to original position by refetching\n        fetchPlants();\n      }\n    } catch (err) {\n      setError('Error updating plant position');\n      fetchPlants();\n    }\n  };\n\n  const handleMouseDown = (event) => {\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n\n    if (clickedPlant) {\n      // Track initial mouse position and clicked plant for potential drag\n      setMouseDownPos(mousePos);\n      setMouseDownPlant(clickedPlant);\n      setDragOffset({\n        x: mousePos.x - clickedPlant.x,\n        y: mousePos.y - clickedPlant.y\n      });\n      \n      // Change cursor to indicate potential drag\n      const canvas = canvasRef.current;\n      canvas.style.cursor = 'grabbing';\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n\n    if (mouseDownPlant && !isDragging) {\n      // Check if we've moved beyond the drag threshold\n      const distance = Math.sqrt(\n        Math.pow(mousePos.x - mouseDownPos.x, 2) + \n        Math.pow(mousePos.y - mouseDownPos.y, 2)\n      );\n      \n      if (distance > DRAG_THRESHOLD) {\n        // Start actual dragging\n        setIsDragging(true);\n        setDraggedPlant(mouseDownPlant);\n        setHasDraggedBeyondThreshold(true);\n      }\n    }\n\n    if (isDragging && draggedPlant) {\n      // Update plant position in real-time during drag\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      \n      // Update local state for immediate visual feedback\n      setPlants(prev => prev.map(plant => \n        plant.id === draggedPlant.id \n          ? { ...plant, x: newX, y: newY }\n          : plant\n      ));\n    } else if (!mouseDownPlant) {\n      // Update cursor based on what's under the mouse\n      const plantUnderMouse = findPlantAtPosition(mousePos.x, mousePos.y);\n      canvas.style.cursor = plantUnderMouse ? 'grab' : 'crosshair';\n    }\n  };\n\n  const handleMouseUp = async (event) => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    \n    if (isDragging && draggedPlant) {\n      // Handle end of drag - save position to backend\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      \n      await updatePlantPosition(draggedPlant.id, newX, newY);\n    } else if (mouseDownPlant && !hasDraggedBeyondThreshold) {\n      // This was a click, not a drag - open metrics dialog\n      setSelectedPlant(mouseDownPlant);\n      setShowMetrics(true);\n    }\n    \n    // Reset all drag-related state\n    setIsDragging(false);\n    setDraggedPlant(null);\n    setMouseDownPlant(null);\n    setHasDraggedBeyondThreshold(false);\n    setDragOffset({ x: 0, y: 0 });\n    setMouseDownPos({ x: 0, y: 0 });\n    \n    canvas.style.cursor = 'crosshair';\n  };\n\n  const handleCanvasClick = (event) => {\n    // Only handle clicks for adding new plants in empty space\n    // Plant clicks are now handled in handleMouseUp\n    if (isDragging || mouseDownPlant) return;\n    \n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n\n    if (!clickedPlant) {\n      // Add new plant at clicked position (empty space)\n      setNewPlant(prev => ({ ...prev, x: mousePos.x, y: mousePos.y }));\n      setShowAddPlant(true);\n    }\n  };\n\n  const handleAddPlant = async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          name: newPlant.name,\n          species: newPlant.species,\n          x: newPlant.x,\n          y: newPlant.y,\n          'image-url': newPlant.imageUrl,\n          'planting-date': new Date().toISOString().split('T')[0]\n        }),\n      });\n\n      if (response.ok) {\n        setShowAddPlant(false);\n        setNewPlant({ name: '', species: '', imageUrl: '', x: 0, y: 0 });\n        fetchPlants();\n      } else {\n        setError('Failed to add plant');\n      }\n    } catch (err) {\n      setError('Error adding plant');\n    }\n  };\n\n  const handleAddMetrics = async () => {\n    if (!selectedPlant) return;\n\n    try {\n      const response = await fetch(`/api/plants/${selectedPlant.id}/metrics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          'plant-id': selectedPlant.id,\n          date: newMetrics.date,\n          ec: parseFloat(newMetrics.ec) || null,\n          ph: parseFloat(newMetrics.ph) || null,\n          temperature: parseFloat(newMetrics.temperature) || null,\n          humidity: parseFloat(newMetrics.humidity) || null,\n          notes: newMetrics.notes\n        }),\n      });\n\n      if (response.ok) {\n        setShowMetrics(false);\n        setNewMetrics({\n          date: new Date().toISOString().split('T')[0],\n          ec: '', ph: '', temperature: '', humidity: '', notes: ''\n        });\n        setSelectedPlant(null);\n      } else {\n        setError('Failed to add metrics');\n      }\n    } catch (err) {\n      setError('Error adding metrics');\n    }\n  };\n\n  const handleViewMetrics = () => {\n    setShowMetrics(false);\n    setShowMetricsViewer(true);\n  };\n\n  if (loading) return <Typography>Loading garden...</Typography>;\n\n  return (\n    <Box>\n      <Paper elevation={1} sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ color: 'primary.dark' }}>\n          🌱 Interactive Garden Canvas\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Click anywhere to add a plant, drag plants to move them, or click on existing plants to log daily metrics\n        </Typography>\n        <Box sx={{ mt: 2 }}>\n          <Chip label=\"💡 Click empty space to add plants\" variant=\"outlined\" sx={{ mr: 1 }} />\n          <Chip label=\"🖱️ Drag plants to move them around\" variant=\"outlined\" sx={{ mr: 1 }} />\n          <Chip label=\"📊 Click plants to log EC, pH, temp, humidity\" variant=\"outlined\" />\n        </Box>\n      </Paper>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Paper elevation={2} sx={{ p: 2, display: 'inline-block' }}>\n        <canvas\n          ref={canvasRef}\n          width={canvasSize.width}\n          height={canvasSize.height}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onClick={handleCanvasClick}\n          style={{\n            border: '2px solid #4caf50',\n            borderRadius: '8px',\n            cursor: 'crosshair',\n            backgroundColor: '#f1f8e9'\n          }}\n        />\n      </Paper>\n\n      {/* Add Plant Dialog */}\n      <Dialog open={showAddPlant} onClose={() => setShowAddPlant(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Add Plant at ({Math.round(newPlant.x)}, {Math.round(newPlant.y)})</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Plant Name\"\n            fullWidth\n            variant=\"outlined\"\n            value={newPlant.name}\n            onChange={(e) => setNewPlant({ ...newPlant, name: e.target.value })}\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"Species\"\n            fullWidth\n            variant=\"outlined\"\n            value={newPlant.species}\n            onChange={(e) => setNewPlant({ ...newPlant, species: e.target.value })}\n            sx={{ mb: 2 }}\n          />\n          <FormControl fullWidth margin=\"dense\" sx={{ mb: 2 }}>\n            <InputLabel>Plant Type (optional)</InputLabel>\n            <Select\n              value={newPlant.imageUrl}\n              onChange={(e) => setNewPlant({ ...newPlant, imageUrl: e.target.value })}\n            >\n              {defaultPlantImages.map((img, index) => (\n                <MenuItem key={index} value={img.url}>\n                  {img.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowAddPlant(false)}>Cancel</Button>\n          <Button onClick={handleAddPlant} variant=\"contained\">Add Plant</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Daily Metrics Dialog */}\n      <Dialog open={showMetrics} onClose={() => setShowMetrics(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          Log Daily Metrics - {selectedPlant?.name}\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Position: ({selectedPlant?.x}, {selectedPlant?.y})\n          </Typography>\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                margin=\"dense\"\n                label=\"Date\"\n                type=\"date\"\n                fullWidth\n                variant=\"outlined\"\n                InputLabelProps={{ shrink: true }}\n                value={newMetrics.date}\n                onChange={(e) => setNewMetrics({ ...newMetrics, date: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                margin=\"dense\"\n                label=\"EC (Electrical Conductivity)\"\n                fullWidth\n                variant=\"outlined\"\n                placeholder=\"e.g., 1.2\"\n                value={newMetrics.ec}\n                onChange={(e) => setNewMetrics({ ...newMetrics, ec: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                margin=\"dense\"\n                label=\"pH Level\"\n                fullWidth\n                variant=\"outlined\"\n                placeholder=\"e.g., 6.5\"\n                value={newMetrics.ph}\n                onChange={(e) => setNewMetrics({ ...newMetrics, ph: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                margin=\"dense\"\n                label=\"Temperature (°C)\"\n                fullWidth\n                variant=\"outlined\"\n                placeholder=\"e.g., 24\"\n                value={newMetrics.temperature}\n                onChange={(e) => setNewMetrics({ ...newMetrics, temperature: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                margin=\"dense\"\n                label=\"Humidity (%)\"\n                fullWidth\n                variant=\"outlined\"\n                placeholder=\"e.g., 65\"\n                value={newMetrics.humidity}\n                onChange={(e) => setNewMetrics({ ...newMetrics, humidity: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin=\"dense\"\n                label=\"Notes\"\n                fullWidth\n                multiline\n                rows={3}\n                variant=\"outlined\"\n                placeholder=\"Any observations about the plant today...\"\n                value={newMetrics.notes}\n                onChange={(e) => setNewMetrics({ ...newMetrics, notes: e.target.value })}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowMetrics(false)}>Cancel</Button>\n          <Button onClick={handleViewMetrics} variant=\"outlined\" startIcon={<ViewMetricsIcon />}>\n            View Metrics History\n          </Button>\n          <Button onClick={handleAddMetrics} variant=\"contained\" startIcon={<MetricsIcon />}>\n            Log Metrics\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default GardenCanvas; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACnF,SACEC,GAAG,EACHC,KAAK,EACLC,UAAU,EACVC,MAAM,EACNC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,MAAM,EACNC,QAAQ,EACRC,GAAG,EACHC,IAAI,EACJC,KAAK,QACA,eAAe;AACtB,SAASC,GAAG,IAAIC,OAAO,EAAEC,SAAS,IAAIC,WAAW,EAAEC,QAAQ,IAAIC,eAAe,QAAQ,qBAAqB;AAC3G,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,SAAS,GAAG/B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACgC,MAAM,EAAEC,SAAS,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqC,OAAO,EAAEC,UAAU,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACyC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1C,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC2C,YAAY,EAAEC,eAAe,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6C,WAAW,EAAEC,cAAc,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC+C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhD,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACiD,UAAU,CAAC,GAAGjD,QAAQ,CAAC;IAAEkD,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,CAAC;;EAE1D;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGrD,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACsD,YAAY,EAAEC,eAAe,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACwD,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAC;IAAE0D,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAC5D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG7D,QAAQ,CAAC;IAAE0D,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAChE,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgE,yBAAyB,EAAEC,4BAA4B,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;EAEjF,MAAMkE,cAAc,GAAG,CAAC,CAAC,CAAC;;EAE1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpE,QAAQ,CAAC;IACvCqE,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZb,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC,CAAC;EAEF,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGzE,QAAQ,CAAC;IAC3C0E,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5CC,EAAE,EAAE,EAAE;IACNC,EAAE,EAAE,EAAE;IACNC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM;IAAEC;EAAM,CAAC,GAAGjF,UAAU,CAAC0B,WAAW,CAAC;EAEzC,MAAMwD,kBAAkB,GAAG,CACzB;IAAEf,IAAI,EAAE,QAAQ;IAAEgB,GAAG,EAAE;EAA0D,CAAC,EAClF;IAAEhB,IAAI,EAAE,SAAS;IAAEgB,GAAG,EAAE;EAA0D,CAAC,EACnF;IAAEhB,IAAI,EAAE,OAAO;IAAEgB,GAAG,EAAE;EAA0D,CAAC,EACjF;IAAEhB,IAAI,EAAE,QAAQ;IAAEgB,GAAG,EAAE;EAA2D,CAAC,EACnF;IAAEhB,IAAI,EAAE,SAAS;IAAEgB,GAAG,EAAE;EAA0D,CAAC,CACpF;EAED,MAAMC,WAAW,GAAGlF,WAAW,CAAC,YAAY;IAC1C,IAAI;MACF,MAAMmF,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAC1CC,OAAO,EAAE;UAAE,eAAe,EAAE,UAAUN,KAAK;QAAG;MAChD,CAAC,CAAC;MAEF,IAAII,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCxD,SAAS,CAACuD,IAAI,CAAC;MACjB,CAAC,MAAM;QACLnD,QAAQ,CAAC,wBAAwB,CAAC;MACpC;IACF,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZrD,QAAQ,CAAC,4BAA4B,CAAC;IACxC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAAC6C,KAAK,CAAC,CAAC;EAEXlF,SAAS,CAAC,MAAM;IACd,IAAIkF,KAAK,EAAE;MACTG,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACH,KAAK,EAAEG,WAAW,CAAC,CAAC;EAExB,MAAMQ,UAAU,GAAG1F,WAAW,CAAC,MAAM;IACnC,MAAM2F,MAAM,GAAG7D,SAAS,CAAC8D,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAD,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEnD,UAAU,CAACC,KAAK,EAAED,UAAU,CAACE,MAAM,CAAC;;IAEvD;IACA8C,GAAG,CAACI,WAAW,GAAG,SAAS;IAC3BJ,GAAG,CAACK,SAAS,GAAG,CAAC;IACjB,KAAK,IAAI5C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIT,UAAU,CAACC,KAAK,EAAEQ,CAAC,IAAI,EAAE,EAAE;MAC9CuC,GAAG,CAACM,SAAS,CAAC,CAAC;MACfN,GAAG,CAACO,MAAM,CAAC9C,CAAC,EAAE,CAAC,CAAC;MAChBuC,GAAG,CAACQ,MAAM,CAAC/C,CAAC,EAAET,UAAU,CAACE,MAAM,CAAC;MAChC8C,GAAG,CAACS,MAAM,CAAC,CAAC;IACd;IACA,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIV,UAAU,CAACE,MAAM,EAAEQ,CAAC,IAAI,EAAE,EAAE;MAC/CsC,GAAG,CAACM,SAAS,CAAC,CAAC;MACfN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE7C,CAAC,CAAC;MAChBsC,GAAG,CAACQ,MAAM,CAACxD,UAAU,CAACC,KAAK,EAAES,CAAC,CAAC;MAC/BsC,GAAG,CAACS,MAAM,CAAC,CAAC;IACd;;IAEA;IACAvE,MAAM,CAACwE,OAAO,CAACC,KAAK,IAAI;MACtB,IAAIA,KAAK,CAAClD,CAAC,KAAKmD,SAAS,IAAID,KAAK,CAACjD,CAAC,KAAKkD,SAAS,EAAE;QAClD;QACA,MAAMC,cAAc,GAAG,CAAAxD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEyD,EAAE,MAAKH,KAAK,CAACG,EAAE;QACpD,MAAMC,UAAU,GAAG,CAAAvE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsE,EAAE,MAAKH,KAAK,CAACG,EAAE;;QAEjD;QACA,IAAID,cAAc,EAAE;UAClBb,GAAG,CAACE,SAAS,GAAG,SAAS,CAAC,CAAC;QAC7B,CAAC,MAAM,IAAIa,UAAU,EAAE;UACrBf,GAAG,CAACE,SAAS,GAAG,SAAS,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLF,GAAG,CAACE,SAAS,GAAG,SAAS,CAAC,CAAC;QAC7B;QAEAF,GAAG,CAACM,SAAS,CAAC,CAAC;QACfN,GAAG,CAACgB,GAAG,CAACL,KAAK,CAAClD,CAAC,EAAEkD,KAAK,CAACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAGuD,IAAI,CAACC,EAAE,CAAC;QAC7ClB,GAAG,CAACmB,IAAI,CAAC,CAAC;;QAEV;QACAnB,GAAG,CAACE,SAAS,GAAG,SAAS;QACzBF,GAAG,CAACoB,IAAI,GAAG,YAAY;QACvBpB,GAAG,CAACqB,SAAS,GAAG,QAAQ;QACxBrB,GAAG,CAACsB,QAAQ,CAACX,KAAK,CAACvC,IAAI,EAAEuC,KAAK,CAAClD,CAAC,EAAEkD,KAAK,CAACjD,CAAC,GAAG,CAAC,CAAC;;QAE9C;QACA,IAAImD,cAAc,EAAE;UAClBb,GAAG,CAACI,WAAW,GAAG,SAAS;UAC3BJ,GAAG,CAACK,SAAS,GAAG,CAAC;UACjBL,GAAG,CAACuB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UACvBvB,GAAG,CAACM,SAAS,CAAC,CAAC;UACfN,GAAG,CAACgB,GAAG,CAACL,KAAK,CAAClD,CAAC,EAAEkD,KAAK,CAACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAGuD,IAAI,CAACC,EAAE,CAAC;UAC7ClB,GAAG,CAACS,MAAM,CAAC,CAAC;UACZT,GAAG,CAACuB,WAAW,CAAC,EAAE,CAAC;QACrB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrF,MAAM,EAAEM,aAAa,EAAEa,YAAY,EAAEL,UAAU,CAACC,KAAK,EAAED,UAAU,CAACE,MAAM,CAAC,CAAC;EAE9ElD,SAAS,CAAC,MAAM;IACd,IAAI,CAACoC,OAAO,EAAE;MACZyD,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACzD,OAAO,EAAEyD,UAAU,CAAC,CAAC;EAEzB,MAAM2B,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAM3B,MAAM,GAAG7D,SAAS,CAAC8D,OAAO;IAChC,MAAM2B,IAAI,GAAG5B,MAAM,CAAC6B,qBAAqB,CAAC,CAAC;IAC3C,OAAO;MACLlE,CAAC,EAAEgE,KAAK,CAACG,OAAO,GAAGF,IAAI,CAACG,IAAI;MAC5BnE,CAAC,EAAE+D,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK;IAC1B,CAAC;EACH,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAACvE,CAAC,EAAEC,CAAC,KAAK;IACpC,OAAOxB,MAAM,CAAC+F,IAAI,CAACtB,KAAK,IAAI;MAC1B,MAAMuB,QAAQ,GAAGjB,IAAI,CAACkB,IAAI,CAAC,CAAC1E,CAAC,GAAGkD,KAAK,CAAClD,CAAC,KAAK,CAAC,GAAG,CAACC,CAAC,GAAGiD,KAAK,CAACjD,CAAC,KAAK,CAAC,CAAC;MACnE,OAAOwE,QAAQ,IAAI,EAAE;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACzD,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe8C,OAAO,EAAE,EAAE;QACrDG,MAAM,EAAE,KAAK;QACbhD,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUN,KAAK;QAClC,CAAC;QACDuD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElF,CAAC,EAAE6E,IAAI;UAAE5E,CAAC,EAAE6E;QAAK,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAIjD,QAAQ,CAACG,EAAE,EAAE;QACf;QACAtD,SAAS,CAACyG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAClC,KAAK,IAC9BA,KAAK,CAACG,EAAE,KAAKuB,OAAO,GAChB;UAAE,GAAG1B,KAAK;UAAElD,CAAC,EAAE6E,IAAI;UAAE5E,CAAC,EAAE6E;QAAK,CAAC,GAC9B5B,KACN,CAAC,CAAC;MACJ,CAAC,MAAM;QACLpE,QAAQ,CAAC,iCAAiC,CAAC;QAC3C;QACA8C,WAAW,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZrD,QAAQ,CAAC,+BAA+B,CAAC;MACzC8C,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMyD,eAAe,GAAIrB,KAAK,IAAK;IACjC,MAAMsB,QAAQ,GAAGvB,WAAW,CAACC,KAAK,CAAC;IACnC,MAAMuB,YAAY,GAAGhB,mBAAmB,CAACe,QAAQ,CAACtF,CAAC,EAAEsF,QAAQ,CAACrF,CAAC,CAAC;IAEhE,IAAIsF,YAAY,EAAE;MAChB;MACApF,eAAe,CAACmF,QAAQ,CAAC;MACzBjF,iBAAiB,CAACkF,YAAY,CAAC;MAC/BxF,aAAa,CAAC;QACZC,CAAC,EAAEsF,QAAQ,CAACtF,CAAC,GAAGuF,YAAY,CAACvF,CAAC;QAC9BC,CAAC,EAAEqF,QAAQ,CAACrF,CAAC,GAAGsF,YAAY,CAACtF;MAC/B,CAAC,CAAC;;MAEF;MACA,MAAMoC,MAAM,GAAG7D,SAAS,CAAC8D,OAAO;MAChCD,MAAM,CAACmD,KAAK,CAACC,MAAM,GAAG,UAAU;IAClC;EACF,CAAC;EAED,MAAMC,eAAe,GAAI1B,KAAK,IAAK;IACjC,MAAMsB,QAAQ,GAAGvB,WAAW,CAACC,KAAK,CAAC;IACnC,MAAM3B,MAAM,GAAG7D,SAAS,CAAC8D,OAAO;IAEhC,IAAIlC,cAAc,IAAI,CAACV,UAAU,EAAE;MACjC;MACA,MAAM+E,QAAQ,GAAGjB,IAAI,CAACkB,IAAI,CACxBlB,IAAI,CAACmC,GAAG,CAACL,QAAQ,CAACtF,CAAC,GAAGE,YAAY,CAACF,CAAC,EAAE,CAAC,CAAC,GACxCwD,IAAI,CAACmC,GAAG,CAACL,QAAQ,CAACrF,CAAC,GAAGC,YAAY,CAACD,CAAC,EAAE,CAAC,CACzC,CAAC;MAED,IAAIwE,QAAQ,GAAGjE,cAAc,EAAE;QAC7B;QACAb,aAAa,CAAC,IAAI,CAAC;QACnBE,eAAe,CAACO,cAAc,CAAC;QAC/BG,4BAA4B,CAAC,IAAI,CAAC;MACpC;IACF;IAEA,IAAIb,UAAU,IAAIE,YAAY,EAAE;MAC9B;MACA,MAAMiF,IAAI,GAAGrB,IAAI,CAACoC,GAAG,CAAC,EAAE,EAAEpC,IAAI,CAACqC,GAAG,CAACtG,UAAU,CAACC,KAAK,GAAG,EAAE,EAAE8F,QAAQ,CAACtF,CAAC,GAAGF,UAAU,CAACE,CAAC,CAAC,CAAC;MACrF,MAAM8E,IAAI,GAAGtB,IAAI,CAACoC,GAAG,CAAC,EAAE,EAAEpC,IAAI,CAACqC,GAAG,CAACtG,UAAU,CAACE,MAAM,GAAG,EAAE,EAAE6F,QAAQ,CAACrF,CAAC,GAAGH,UAAU,CAACG,CAAC,CAAC,CAAC;;MAEtF;MACAvB,SAAS,CAACyG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAClC,KAAK,IAC9BA,KAAK,CAACG,EAAE,KAAKzD,YAAY,CAACyD,EAAE,GACxB;QAAE,GAAGH,KAAK;QAAElD,CAAC,EAAE6E,IAAI;QAAE5E,CAAC,EAAE6E;MAAK,CAAC,GAC9B5B,KACN,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAAC9C,cAAc,EAAE;MAC1B;MACA,MAAM0F,eAAe,GAAGvB,mBAAmB,CAACe,QAAQ,CAACtF,CAAC,EAAEsF,QAAQ,CAACrF,CAAC,CAAC;MACnEoC,MAAM,CAACmD,KAAK,CAACC,MAAM,GAAGK,eAAe,GAAG,MAAM,GAAG,WAAW;IAC9D;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAO/B,KAAK,IAAK;IACrC,MAAMsB,QAAQ,GAAGvB,WAAW,CAACC,KAAK,CAAC;IACnC,MAAM3B,MAAM,GAAG7D,SAAS,CAAC8D,OAAO;IAEhC,IAAI5C,UAAU,IAAIE,YAAY,EAAE;MAC9B;MACA,MAAMiF,IAAI,GAAGrB,IAAI,CAACoC,GAAG,CAAC,EAAE,EAAEpC,IAAI,CAACqC,GAAG,CAACtG,UAAU,CAACC,KAAK,GAAG,EAAE,EAAE8F,QAAQ,CAACtF,CAAC,GAAGF,UAAU,CAACE,CAAC,CAAC,CAAC;MACrF,MAAM8E,IAAI,GAAGtB,IAAI,CAACoC,GAAG,CAAC,EAAE,EAAEpC,IAAI,CAACqC,GAAG,CAACtG,UAAU,CAACE,MAAM,GAAG,EAAE,EAAE6F,QAAQ,CAACrF,CAAC,GAAGH,UAAU,CAACG,CAAC,CAAC,CAAC;MAEtF,MAAM0E,mBAAmB,CAAC/E,YAAY,CAACyD,EAAE,EAAEwB,IAAI,EAAEC,IAAI,CAAC;IACxD,CAAC,MAAM,IAAI1E,cAAc,IAAI,CAACE,yBAAyB,EAAE;MACvD;MACAtB,gBAAgB,CAACoB,cAAc,CAAC;MAChChB,cAAc,CAAC,IAAI,CAAC;IACtB;;IAEA;IACAO,aAAa,CAAC,KAAK,CAAC;IACpBE,eAAe,CAAC,IAAI,CAAC;IACrBQ,iBAAiB,CAAC,IAAI,CAAC;IACvBE,4BAA4B,CAAC,KAAK,CAAC;IACnCR,aAAa,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,CAAC;IAC7BE,eAAe,CAAC;MAAEH,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,CAAC;IAE/BoC,MAAM,CAACmD,KAAK,CAACC,MAAM,GAAG,WAAW;EACnC,CAAC;EAED,MAAMO,iBAAiB,GAAIhC,KAAK,IAAK;IACnC;IACA;IACA,IAAItE,UAAU,IAAIU,cAAc,EAAE;IAElC,MAAMkF,QAAQ,GAAGvB,WAAW,CAACC,KAAK,CAAC;IACnC,MAAMuB,YAAY,GAAGhB,mBAAmB,CAACe,QAAQ,CAACtF,CAAC,EAAEsF,QAAQ,CAACrF,CAAC,CAAC;IAEhE,IAAI,CAACsF,YAAY,EAAE;MACjB;MACA7E,WAAW,CAACyE,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEnF,CAAC,EAAEsF,QAAQ,CAACtF,CAAC;QAAEC,CAAC,EAAEqF,QAAQ,CAACrF;MAAE,CAAC,CAAC,CAAC;MAChEf,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;EAED,MAAM+G,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMpE,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAC1CiD,MAAM,EAAE,MAAM;QACdhD,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUN,KAAK;QAClC,CAAC;QACDuD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBvE,IAAI,EAAEF,QAAQ,CAACE,IAAI;UACnBC,OAAO,EAAEH,QAAQ,CAACG,OAAO;UACzBZ,CAAC,EAAES,QAAQ,CAACT,CAAC;UACbC,CAAC,EAAEQ,QAAQ,CAACR,CAAC;UACb,WAAW,EAAEQ,QAAQ,CAACI,QAAQ;UAC9B,eAAe,EAAE,IAAII,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACxD,CAAC;MACH,CAAC,CAAC;MAEF,IAAIU,QAAQ,CAACG,EAAE,EAAE;QACf9C,eAAe,CAAC,KAAK,CAAC;QACtBwB,WAAW,CAAC;UAAEC,IAAI,EAAE,EAAE;UAAEC,OAAO,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEb,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC,CAAC;QAChE2B,WAAW,CAAC,CAAC;MACf,CAAC,MAAM;QACL9C,QAAQ,CAAC,qBAAqB,CAAC;MACjC;IACF,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZrD,QAAQ,CAAC,oBAAoB,CAAC;IAChC;EACF,CAAC;EAED,MAAMoH,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACnH,aAAa,EAAE;IAEpB,IAAI;MACF,MAAM8C,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe/C,aAAa,CAACsE,EAAE,UAAU,EAAE;QACtE0B,MAAM,EAAE,MAAM;QACdhD,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUN,KAAK;QAClC,CAAC;QACDuD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,UAAU,EAAEnG,aAAa,CAACsE,EAAE;UAC5BrC,IAAI,EAAEF,UAAU,CAACE,IAAI;UACrBI,EAAE,EAAE+E,UAAU,CAACrF,UAAU,CAACM,EAAE,CAAC,IAAI,IAAI;UACrCC,EAAE,EAAE8E,UAAU,CAACrF,UAAU,CAACO,EAAE,CAAC,IAAI,IAAI;UACrCC,WAAW,EAAE6E,UAAU,CAACrF,UAAU,CAACQ,WAAW,CAAC,IAAI,IAAI;UACvDC,QAAQ,EAAE4E,UAAU,CAACrF,UAAU,CAACS,QAAQ,CAAC,IAAI,IAAI;UACjDC,KAAK,EAAEV,UAAU,CAACU;QACpB,CAAC;MACH,CAAC,CAAC;MAEF,IAAIK,QAAQ,CAACG,EAAE,EAAE;QACf5C,cAAc,CAAC,KAAK,CAAC;QACrB2B,aAAa,CAAC;UACZC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAC5CC,EAAE,EAAE,EAAE;UAAEC,EAAE,EAAE,EAAE;UAAEC,WAAW,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,KAAK,EAAE;QACxD,CAAC,CAAC;QACFxC,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACLF,QAAQ,CAAC,uBAAuB,CAAC;MACnC;IACF,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZrD,QAAQ,CAAC,sBAAsB,CAAC;IAClC;EACF,CAAC;EAED,MAAMsH,iBAAiB,GAAGA,CAAA,KAAM;IAC9BhH,cAAc,CAAC,KAAK,CAAC;IACrBE,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,IAAIX,OAAO,EAAE,oBAAON,OAAA,CAACxB,UAAU;IAAAwJ,QAAA,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;EAE9D,oBACEpI,OAAA,CAAC1B,GAAG;IAAA0J,QAAA,gBACFhI,OAAA,CAACzB,KAAK;MAAC8J,SAAS,EAAE,CAAE;MAACC,EAAE,EAAE;QAAEC,CAAC,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAR,QAAA,gBACvChI,OAAA,CAACxB,UAAU;QAACiK,OAAO,EAAC,IAAI;QAACC,SAAS,EAAC,IAAI;QAACC,YAAY;QAACL,EAAE,EAAE;UAAEM,KAAK,EAAE;QAAe,CAAE;QAAAZ,QAAA,EAAC;MAEpF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbpI,OAAA,CAACxB,UAAU;QAACiK,OAAO,EAAC,OAAO;QAACG,KAAK,EAAC,eAAe;QAAAZ,QAAA,EAAC;MAElD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbpI,OAAA,CAAC1B,GAAG;QAACgK,EAAE,EAAE;UAAEO,EAAE,EAAE;QAAE,CAAE;QAAAb,QAAA,gBACjBhI,OAAA,CAACX,IAAI;UAACyJ,KAAK,EAAC,8CAAoC;UAACL,OAAO,EAAC,UAAU;UAACH,EAAE,EAAE;YAAES,EAAE,EAAE;UAAE;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrFpI,OAAA,CAACX,IAAI;UAACyJ,KAAK,EAAC,oDAAqC;UAACL,OAAO,EAAC,UAAU;UAACH,EAAE,EAAE;YAAES,EAAE,EAAE;UAAE;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACtFpI,OAAA,CAACX,IAAI;UAACyJ,KAAK,EAAC,yDAA+C;UAACL,OAAO,EAAC;QAAU;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAEP5H,KAAK,iBACJR,OAAA,CAACV,KAAK;MAAC0J,QAAQ,EAAC,OAAO;MAACV,EAAE,EAAE;QAAEE,EAAE,EAAE;MAAE,CAAE;MAAAR,QAAA,EACnCxH;IAAK;MAAAyH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACR,eAEDpI,OAAA,CAACzB,KAAK;MAAC8J,SAAS,EAAE,CAAE;MAACC,EAAE,EAAE;QAAEC,CAAC,EAAE,CAAC;QAAEU,OAAO,EAAE;MAAe,CAAE;MAAAjB,QAAA,eACzDhI,OAAA;QACEkJ,GAAG,EAAE/I,SAAU;QACfgB,KAAK,EAAED,UAAU,CAACC,KAAM;QACxBC,MAAM,EAAEF,UAAU,CAACE,MAAO;QAC1B+H,WAAW,EAAEnC,eAAgB;QAC7BoC,WAAW,EAAE/B,eAAgB;QAC7BgC,SAAS,EAAE3B,aAAc;QACzB4B,OAAO,EAAE3B,iBAAkB;QAC3BR,KAAK,EAAE;UACLoC,MAAM,EAAE,mBAAmB;UAC3BC,YAAY,EAAE,KAAK;UACnBpC,MAAM,EAAE,WAAW;UACnBqC,eAAe,EAAE;QACnB;MAAE;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAGRpI,OAAA,CAACtB,MAAM;MAACgL,IAAI,EAAE9I,YAAa;MAAC+I,OAAO,EAAEA,CAAA,KAAM9I,eAAe,CAAC,KAAK,CAAE;MAAC+I,QAAQ,EAAC,IAAI;MAACC,SAAS;MAAA7B,QAAA,gBACxFhI,OAAA,CAACrB,WAAW;QAAAqJ,QAAA,GAAC,gBAAc,EAAC7C,IAAI,CAAC2E,KAAK,CAAC1H,QAAQ,CAACT,CAAC,CAAC,EAAC,IAAE,EAACwD,IAAI,CAAC2E,KAAK,CAAC1H,QAAQ,CAACR,CAAC,CAAC,EAAC,GAAC;MAAA;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAC5FpI,OAAA,CAACpB,aAAa;QAAAoJ,QAAA,gBACZhI,OAAA,CAAClB,SAAS;UACRiL,SAAS;UACTC,MAAM,EAAC,OAAO;UACdlB,KAAK,EAAC,YAAY;UAClBe,SAAS;UACTpB,OAAO,EAAC,UAAU;UAClBwB,KAAK,EAAE7H,QAAQ,CAACE,IAAK;UACrB4H,QAAQ,EAAGC,CAAC,IAAK9H,WAAW,CAAC;YAAE,GAAGD,QAAQ;YAAEE,IAAI,EAAE6H,CAAC,CAACC,MAAM,CAACH;UAAM,CAAC,CAAE;UACpE3B,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eACFpI,OAAA,CAAClB,SAAS;UACRkL,MAAM,EAAC,OAAO;UACdlB,KAAK,EAAC,SAAS;UACfe,SAAS;UACTpB,OAAO,EAAC,UAAU;UAClBwB,KAAK,EAAE7H,QAAQ,CAACG,OAAQ;UACxB2H,QAAQ,EAAGC,CAAC,IAAK9H,WAAW,CAAC;YAAE,GAAGD,QAAQ;YAAEG,OAAO,EAAE4H,CAAC,CAACC,MAAM,CAACH;UAAM,CAAC,CAAE;UACvE3B,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eACFpI,OAAA,CAAChB,WAAW;UAAC6K,SAAS;UAACG,MAAM,EAAC,OAAO;UAAC1B,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE,CAAE;UAAAR,QAAA,gBAClDhI,OAAA,CAACf,UAAU;YAAA+I,QAAA,EAAC;UAAqB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC9CpI,OAAA,CAACd,MAAM;YACL+K,KAAK,EAAE7H,QAAQ,CAACI,QAAS;YACzB0H,QAAQ,EAAGC,CAAC,IAAK9H,WAAW,CAAC;cAAE,GAAGD,QAAQ;cAAEI,QAAQ,EAAE2H,CAAC,CAACC,MAAM,CAACH;YAAM,CAAC,CAAE;YAAAjC,QAAA,EAEvE3E,kBAAkB,CAAC0D,GAAG,CAAC,CAACsD,GAAG,EAAEC,KAAK,kBACjCtK,OAAA,CAACb,QAAQ;cAAa8K,KAAK,EAAEI,GAAG,CAAC/G,GAAI;cAAA0E,QAAA,EAClCqC,GAAG,CAAC/H;YAAI,GADIgI,KAAK;cAAArC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEV,CACX;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAChBpI,OAAA,CAACnB,aAAa;QAAAmJ,QAAA,gBACZhI,OAAA,CAACvB,MAAM;UAAC6K,OAAO,EAAEA,CAAA,KAAMzI,eAAe,CAAC,KAAK,CAAE;UAAAmH,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9DpI,OAAA,CAACvB,MAAM;UAAC6K,OAAO,EAAE1B,cAAe;UAACa,OAAO,EAAC,WAAW;UAAAT,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAGTpI,OAAA,CAACtB,MAAM;MAACgL,IAAI,EAAE5I,WAAY;MAAC6I,OAAO,EAAEA,CAAA,KAAM5I,cAAc,CAAC,KAAK,CAAE;MAAC6I,QAAQ,EAAC,IAAI;MAACC,SAAS;MAAA7B,QAAA,gBACtFhI,OAAA,CAACrB,WAAW;QAAAqJ,QAAA,GAAC,sBACS,EAACtH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE4B,IAAI,eACxCtC,OAAA,CAACxB,UAAU;UAACiK,OAAO,EAAC,OAAO;UAACG,KAAK,EAAC,eAAe;UAAAZ,QAAA,GAAC,aACrC,EAACtH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEiB,CAAC,EAAC,IAAE,EAACjB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEkB,CAAC,EAAC,GACnD;QAAA;UAAAqG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACdpI,OAAA,CAACpB,aAAa;QAAAoJ,QAAA,eACZhI,OAAA,CAACjB,IAAI;UAACwL,SAAS;UAACC,OAAO,EAAE,CAAE;UAAAxC,QAAA,gBACzBhI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAA3C,QAAA,eACvBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,MAAM;cACZ8B,IAAI,EAAC,MAAM;cACXf,SAAS;cACTpB,OAAO,EAAC,UAAU;cAClBoC,eAAe,EAAE;gBAAEC,MAAM,EAAE;cAAK,CAAE;cAClCb,KAAK,EAAExH,UAAU,CAACE,IAAK;cACvBuH,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAEE,IAAI,EAAEwH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAA3C,QAAA,eACvBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,8BAA8B;cACpCe,SAAS;cACTpB,OAAO,EAAC,UAAU;cAClBsC,WAAW,EAAC,WAAW;cACvBd,KAAK,EAAExH,UAAU,CAACM,EAAG;cACrBmH,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAEM,EAAE,EAAEoH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAA3C,QAAA,eACvBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,UAAU;cAChBe,SAAS;cACTpB,OAAO,EAAC,UAAU;cAClBsC,WAAW,EAAC,WAAW;cACvBd,KAAK,EAAExH,UAAU,CAACO,EAAG;cACrBkH,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAEO,EAAE,EAAEmH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAA3C,QAAA,eACvBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,qBAAkB;cACxBe,SAAS;cACTpB,OAAO,EAAC,UAAU;cAClBsC,WAAW,EAAC,UAAU;cACtBd,KAAK,EAAExH,UAAU,CAACQ,WAAY;cAC9BiH,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAEQ,WAAW,EAAEkH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAA3C,QAAA,eACvBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,cAAc;cACpBe,SAAS;cACTpB,OAAO,EAAC,UAAU;cAClBsC,WAAW,EAAC,UAAU;cACtBd,KAAK,EAAExH,UAAU,CAACS,QAAS;cAC3BgH,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAES,QAAQ,EAAEiH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;YAAC0L,IAAI;YAACC,EAAE,EAAE,EAAG;YAAA1C,QAAA,eAChBhI,OAAA,CAAClB,SAAS;cACRkL,MAAM,EAAC,OAAO;cACdlB,KAAK,EAAC,OAAO;cACbe,SAAS;cACTmB,SAAS;cACTC,IAAI,EAAE,CAAE;cACRxC,OAAO,EAAC,UAAU;cAClBsC,WAAW,EAAC,2CAA2C;cACvDd,KAAK,EAAExH,UAAU,CAACU,KAAM;cACxB+G,QAAQ,EAAGC,CAAC,IAAKzH,aAAa,CAAC;gBAAE,GAAGD,UAAU;gBAAEU,KAAK,EAAEgH,CAAC,CAACC,MAAM,CAACH;cAAM,CAAC;YAAE;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM,CAAC,eAChBpI,OAAA,CAACnB,aAAa;QAAAmJ,QAAA,gBACZhI,OAAA,CAACvB,MAAM;UAAC6K,OAAO,EAAEA,CAAA,KAAMvI,cAAc,CAAC,KAAK,CAAE;UAAAiH,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7DpI,OAAA,CAACvB,MAAM;UAAC6K,OAAO,EAAEvB,iBAAkB;UAACU,OAAO,EAAC,UAAU;UAACyC,SAAS,eAAElL,OAAA,CAACJ,eAAe;YAAAqI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAAAJ,QAAA,EAAC;QAEvF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTpI,OAAA,CAACvB,MAAM;UAAC6K,OAAO,EAAEzB,gBAAiB;UAACY,OAAO,EAAC,WAAW;UAACyC,SAAS,eAAElL,OAAA,CAACN,WAAW;YAAAuI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAAAJ,QAAA,EAAC;QAEnF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAClI,EAAA,CAzhBID,YAAY;AAAAkL,EAAA,GAAZlL,YAAY;AA2hBlB,eAAeA,YAAY;AAAC,IAAAkL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}