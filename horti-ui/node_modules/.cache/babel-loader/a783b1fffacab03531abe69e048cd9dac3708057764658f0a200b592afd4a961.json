{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { clamp } from '@mantine/hooks';\nimport { padTime } from '../TimePicker/utils/pad-time/pad-time.mjs';\nconst getMaxDigit = max => Number(max.toFixed(0)[0]);\nconst SpinInput = forwardRef(({\n  value,\n  min,\n  max,\n  onChange,\n  focusable,\n  step,\n  onNextInput,\n  onPreviousInput,\n  onFocus,\n  readOnly,\n  ...others\n}, ref) => {\n  const maxDigit = getMaxDigit(max);\n  const arrowsMax = max + 1 - step;\n  const handleChange = value2 => {\n    if (readOnly) {\n      return;\n    }\n    const clearValue = value2.replace(/\\D/g, \"\");\n    if (clearValue !== \"\") {\n      const parsedValue = clamp(parseInt(clearValue, 10), min, max);\n      onChange(parsedValue);\n      if (parsedValue > maxDigit) {\n        onNextInput?.();\n      }\n    }\n  };\n  const handleKeyDown = event => {\n    if (readOnly) {\n      return;\n    }\n    if (event.key === \"0\" || event.key === \"Num0\") {\n      if (value === 0) {\n        event.preventDefault();\n        onNextInput?.();\n      }\n    }\n    if (event.key === \"Home\") {\n      event.preventDefault();\n      onChange(min);\n    }\n    if (event.key === \"End\") {\n      event.preventDefault();\n      onChange(max);\n    }\n    if (event.key === \"Backspace\" || event.key === \"Delete\") {\n      event.preventDefault();\n      if (value !== null) {\n        onChange(null);\n      } else {\n        onPreviousInput?.();\n      }\n    }\n    if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      onNextInput?.();\n    }\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault();\n      onPreviousInput?.();\n    }\n    if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      const newValue = value === null ? min : clamp(value + step, min, arrowsMax);\n      onChange(newValue);\n    }\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      const newValue = value === null ? arrowsMax : clamp(value - step, min, arrowsMax);\n      onChange(newValue);\n    }\n  };\n  return /* @__PURE__ */jsx(\"input\", {\n    ref,\n    type: \"text\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": value === null ? 0 : value,\n    \"data-empty\": value === null || void 0,\n    inputMode: \"numeric\",\n    placeholder: \"--\",\n    value: value === null ? \"\" : padTime(value),\n    onChange: event => handleChange(event.currentTarget.value),\n    onKeyDown: handleKeyDown,\n    onFocus: event => {\n      event.currentTarget.select();\n      onFocus?.(event);\n    },\n    onClick: event => {\n      event.stopPropagation();\n      event.currentTarget.select();\n    },\n    onMouseDown: event => event.stopPropagation(),\n    ...others\n  });\n});\nSpinInput.displayName = \"@mantine/dates/SpinInput\";\nexport { SpinInput };","map":{"version":3,"names":["getMaxDigit","max","Number","toFixed","SpinInput","forwardRef","value","min","onChange","focusable","step","onNextInput","onPreviousInput","onFocus","readOnly","others","ref","maxDigit","arrowsMax","handleChange","value2","clearValue","replace","parsedValue","clamp","parseInt","handleKeyDown","event","key","preventDefault","newValue","jsx","type","role","inputMode","placeholder","padTime","currentTarget","onKeyDown","select","onClick","stopPropagation","onMouseDown","displayName"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/SpinInput/SpinInput.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { clamp } from '@mantine/hooks';\nimport { padTime } from '../TimePicker/utils/pad-time/pad-time';\n\ninterface SpinInputProps\n  extends Omit<React.ComponentPropsWithoutRef<'input'>, 'onChange' | 'value'> {\n  value: number | null;\n  min: number;\n  max: number;\n  onChange: (value: number | null) => void;\n  focusable: boolean;\n  step: number;\n  onNextInput?: () => void;\n  onPreviousInput?: () => void;\n}\n\nconst getMaxDigit = (max: number) => Number(max.toFixed(0)[0]);\n\nexport const SpinInput = forwardRef<HTMLInputElement, SpinInputProps>(\n  (\n    {\n      value,\n      min,\n      max,\n      onChange,\n      focusable,\n      step,\n      onNextInput,\n      onPreviousInput,\n      onFocus,\n      readOnly,\n      ...others\n    },\n    ref\n  ) => {\n    const maxDigit = getMaxDigit(max);\n    const arrowsMax = max + 1 - step;\n\n    const handleChange = (value: string) => {\n      if (readOnly) {\n        return;\n      }\n\n      const clearValue = value.replace(/\\D/g, '');\n      if (clearValue !== '') {\n        const parsedValue = clamp(parseInt(clearValue, 10), min, max);\n        onChange(parsedValue);\n        if (parsedValue > maxDigit) {\n          onNextInput?.();\n        }\n      }\n    };\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (readOnly) {\n        return;\n      }\n\n      if (event.key === '0' || event.key === 'Num0') {\n        if (value === 0) {\n          event.preventDefault();\n          onNextInput?.();\n        }\n      }\n\n      if (event.key === 'Home') {\n        event.preventDefault();\n        onChange(min);\n      }\n\n      if (event.key === 'End') {\n        event.preventDefault();\n        onChange(max);\n      }\n\n      if (event.key === 'Backspace' || event.key === 'Delete') {\n        event.preventDefault();\n\n        if (value !== null) {\n          onChange(null);\n        } else {\n          onPreviousInput?.();\n        }\n      }\n\n      if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        onNextInput?.();\n      }\n\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        onPreviousInput?.();\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault();\n        const newValue = value === null ? min : clamp(value + step, min, arrowsMax);\n        onChange(newValue);\n      }\n\n      if (event.key === 'ArrowDown') {\n        event.preventDefault();\n        const newValue = value === null ? arrowsMax : clamp(value - step, min, arrowsMax);\n        onChange(newValue);\n      }\n    };\n\n    return (\n      <input\n        ref={ref}\n        type=\"text\"\n        role=\"spinbutton\"\n        aria-valuemin={min}\n        aria-valuemax={max}\n        aria-valuenow={value === null ? 0 : value}\n        data-empty={value === null || undefined}\n        inputMode=\"numeric\"\n        placeholder=\"--\"\n        value={value === null ? '' : padTime(value)}\n        onChange={(event) => handleChange(event.currentTarget.value)}\n        onKeyDown={handleKeyDown}\n        onFocus={(event) => {\n          event.currentTarget.select();\n          onFocus?.(event);\n        }}\n        onClick={(event) => {\n          event.stopPropagation();\n          event.currentTarget.select();\n        }}\n        onMouseDown={(event) => event.stopPropagation()}\n        {...others}\n      />\n    );\n  }\n);\n\nSpinInput.displayName = '@mantine/dates/SpinInput';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}