{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getContextItemIndex } from '../../core/utils/get-context-item-index/get-context-item-index.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { getWithProps } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useDelayedHover } from '../Floating/use-delayed-hover.mjs';\nimport '@floating-ui/react';\nimport '../Floating/FloatingArrow/FloatingArrow.mjs';\nimport { Popover } from '../Popover/Popover.mjs';\nimport '../Popover/PopoverDropdown/PopoverDropdown.mjs';\nimport '../Popover/PopoverTarget/PopoverTarget.mjs';\nimport { MenuContextProvider } from './Menu.context.mjs';\nimport { MenuDivider } from './MenuDivider/MenuDivider.mjs';\nimport { MenuDropdown } from './MenuDropdown/MenuDropdown.mjs';\nimport { MenuItem } from './MenuItem/MenuItem.mjs';\nimport { MenuLabel } from './MenuLabel/MenuLabel.mjs';\nimport { MenuSub } from './MenuSub/MenuSub.mjs';\nimport { MenuTarget } from './MenuTarget/MenuTarget.mjs';\nimport classes from './Menu.module.css.mjs';\nconst defaultProps = {\n  trapFocus: true,\n  closeOnItemClick: true,\n  withInitialFocusPlaceholder: true,\n  clickOutsideEvents: [\"mousedown\", \"touchstart\", \"keydown\"],\n  loop: true,\n  trigger: \"click\",\n  openDelay: 0,\n  closeDelay: 100,\n  menuItemTabIndex: -1\n};\nfunction Menu(_props) {\n  const props = useProps(\"Menu\", defaultProps, _props);\n  const {\n    children,\n    onOpen,\n    onClose,\n    opened,\n    defaultOpened,\n    trapFocus,\n    onChange,\n    closeOnItemClick,\n    loop,\n    closeOnEscape,\n    trigger,\n    openDelay,\n    closeDelay,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    vars,\n    menuItemTabIndex,\n    keepMounted,\n    withInitialFocusPlaceholder,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Menu\",\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled\n  });\n  const [_opened, setOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange\n  });\n  const [openedViaClick, setOpenedViaClick] = useState(false);\n  const close = () => {\n    setOpened(false);\n    setOpenedViaClick(false);\n    _opened && onClose?.();\n  };\n  const open = () => {\n    setOpened(true);\n    !_opened && onOpen?.();\n  };\n  const toggleDropdown = () => {\n    _opened ? close() : open();\n  };\n  const {\n    openDropdown,\n    closeDropdown\n  } = useDelayedHover({\n    open,\n    close,\n    closeDelay,\n    openDelay\n  });\n  const getItemIndex = node => getContextItemIndex(\"[data-menu-item]\", \"[data-menu-dropdown]\", node);\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  return /* @__PURE__ */jsx(MenuContextProvider, {\n    value: {\n      getStyles,\n      opened: _opened,\n      toggleDropdown,\n      getItemIndex,\n      openedViaClick,\n      setOpenedViaClick,\n      closeOnItemClick,\n      closeDropdown: trigger === \"click\" ? close : closeDropdown,\n      openDropdown: trigger === \"click\" ? open : openDropdown,\n      closeDropdownImmediately: close,\n      loop,\n      trigger,\n      unstyled,\n      menuItemTabIndex,\n      withInitialFocusPlaceholder\n    },\n    children: /* @__PURE__ */jsx(Popover, {\n      ...others,\n      opened: _opened,\n      onChange: toggleDropdown,\n      defaultOpened,\n      trapFocus: keepMounted ? false : trapFocus,\n      closeOnEscape,\n      __staticSelector: \"Menu\",\n      classNames: resolvedClassNames,\n      styles: resolvedStyles,\n      unstyled,\n      variant,\n      keepMounted,\n      children\n    })\n  });\n}\nMenu.extend = input => input;\nMenu.withProps = getWithProps(Menu);\nMenu.classes = classes;\nMenu.displayName = \"@mantine/core/Menu\";\nMenu.Item = MenuItem;\nMenu.Label = MenuLabel;\nMenu.Dropdown = MenuDropdown;\nMenu.Target = MenuTarget;\nMenu.Divider = MenuDivider;\nMenu.Sub = MenuSub;\nexport { Menu };","map":{"version":3,"names":["defaultProps","trapFocus","closeOnItemClick","withInitialFocusPlaceholder","clickOutsideEvents","loop","trigger","openDelay","closeDelay","menuItemTabIndex","Menu","_props","props","useProps","children","onOpen","onClose","opened","defaultOpened","onChange","closeOnEscape","classNames","styles","unstyled","variant","vars","keepMounted","others","getStyles","useStyles","name","classes","_opened","setOpened","useUncontrolled","value","defaultValue","finalValue","openedViaClick","setOpenedViaClick","useState","close","open","toggleDropdown","openDropdown","closeDropdown","useDelayedHover","getItemIndex","node","getContextItemIndex","resolvedClassNames","resolvedStyles","useResolvedStylesApi","jsx","MenuContextProvider","closeDropdownImmediately","Popover","__staticSelector","extend","input","withProps","getWithProps","displayName","Item","MenuItem","Label","MenuLabel","Dropdown","MenuDropdown","Target","MenuTarget","Divider","MenuDivider","Sub","MenuSub"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/core/src/components/Menu/Menu.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport {\n  ExtendComponent,\n  Factory,\n  getContextItemIndex,\n  getWithProps,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { useDelayedHover } from '../Floating';\nimport { __PopoverProps, Popover, PopoverStylesNames } from '../Popover';\nimport { MenuContextProvider } from './Menu.context';\nimport { MenuDivider } from './MenuDivider/MenuDivider';\nimport { MenuDropdown } from './MenuDropdown/MenuDropdown';\nimport { MenuItem } from './MenuItem/MenuItem';\nimport { MenuLabel } from './MenuLabel/MenuLabel';\nimport { MenuSub } from './MenuSub/MenuSub';\nimport { MenuTarget } from './MenuTarget/MenuTarget';\nimport classes from './Menu.module.css';\n\nexport type MenuStylesNames =\n  | 'item'\n  | 'itemLabel'\n  | 'itemSection'\n  | 'label'\n  | 'divider'\n  | 'chevron'\n  | PopoverStylesNames;\n\nexport type MenuFactory = Factory<{\n  props: MenuProps;\n  stylesNames: MenuStylesNames;\n}>;\n\nexport interface MenuProps extends __PopoverProps, StylesApiProps<MenuFactory> {\n  variant?: string;\n\n  /** Menu content */\n  children?: React.ReactNode;\n\n  /** Controlled menu opened state */\n  opened?: boolean;\n\n  /** Uncontrolled menu initial opened state */\n  defaultOpened?: boolean;\n\n  /** Determines whether dropdown should trap focus of keyboard events */\n  trapFocus?: boolean;\n\n  /** Called when menu opened state changes */\n  onChange?: (opened: boolean) => void;\n\n  /** Called when Menu is opened */\n  onOpen?: () => void;\n\n  /** Called when Menu is closed */\n  onClose?: () => void;\n\n  /** Determines whether Menu should be closed when item is clicked */\n  closeOnItemClick?: boolean;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Determines whether dropdown should be closed when Escape key is pressed */\n  closeOnEscape?: boolean;\n\n  /** Event which should open menu */\n  trigger?: 'click' | 'hover' | 'click-hover';\n\n  /** Open delay in ms, applicable only to trigger=\"hover\" variant */\n  openDelay?: number;\n\n  /** Close delay in ms, applicable only to trigger=\"hover\" variant */\n  closeDelay?: number;\n\n  /** Determines whether dropdown should be closed on outside clicks */\n  closeOnClickOutside?: boolean;\n\n  /** Events that trigger outside clicks */\n  clickOutsideEvents?: string[];\n\n  /** Id base to create accessibility connections */\n  id?: string;\n\n  /** Set the `tabindex` on all menu items. Defaults to -1 */\n  menuItemTabIndex?: -1 | 0;\n\n  /** Determines whether focus placeholder element should be added before items, `true` by default */\n  withInitialFocusPlaceholder?: boolean;\n}\n\nconst defaultProps: Partial<MenuProps> = {\n  trapFocus: true,\n  closeOnItemClick: true,\n  withInitialFocusPlaceholder: true,\n  clickOutsideEvents: ['mousedown', 'touchstart', 'keydown'],\n  loop: true,\n  trigger: 'click',\n  openDelay: 0,\n  closeDelay: 100,\n  menuItemTabIndex: -1,\n};\n\nexport function Menu(_props: MenuProps) {\n  const props = useProps('Menu', defaultProps, _props);\n  const {\n    children,\n    onOpen,\n    onClose,\n    opened,\n    defaultOpened,\n    trapFocus,\n    onChange,\n    closeOnItemClick,\n    loop,\n    closeOnEscape,\n    trigger,\n    openDelay,\n    closeDelay,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    vars,\n    menuItemTabIndex,\n    keepMounted,\n    withInitialFocusPlaceholder,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<MenuFactory>({\n    name: 'Menu',\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const [_opened, setOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange,\n  });\n  const [openedViaClick, setOpenedViaClick] = useState(false);\n\n  const close = () => {\n    setOpened(false);\n    setOpenedViaClick(false);\n    _opened && onClose?.();\n  };\n\n  const open = () => {\n    setOpened(true);\n    !_opened && onOpen?.();\n  };\n\n  const toggleDropdown = () => {\n    _opened ? close() : open();\n  };\n\n  const { openDropdown, closeDropdown } = useDelayedHover({ open, close, closeDelay, openDelay });\n\n  const getItemIndex = (node: HTMLButtonElement) =>\n    getContextItemIndex('[data-menu-item]', '[data-menu-dropdown]', node);\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MenuFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  return (\n    <MenuContextProvider\n      value={{\n        getStyles,\n        opened: _opened,\n        toggleDropdown,\n        getItemIndex,\n        openedViaClick,\n        setOpenedViaClick,\n        closeOnItemClick,\n        closeDropdown: trigger === 'click' ? close : closeDropdown,\n        openDropdown: trigger === 'click' ? open : openDropdown,\n        closeDropdownImmediately: close,\n        loop,\n        trigger,\n        unstyled,\n        menuItemTabIndex,\n        withInitialFocusPlaceholder,\n      }}\n    >\n      <Popover\n        {...others}\n        opened={_opened}\n        onChange={toggleDropdown}\n        defaultOpened={defaultOpened}\n        trapFocus={keepMounted ? false : trapFocus}\n        closeOnEscape={closeOnEscape}\n        __staticSelector=\"Menu\"\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        variant={variant}\n        keepMounted={keepMounted}\n      >\n        {children}\n      </Popover>\n    </MenuContextProvider>\n  );\n}\n\nMenu.extend = (input: ExtendComponent<MenuFactory>) => input;\nMenu.withProps = getWithProps<MenuProps, MenuProps>(Menu as any);\nMenu.classes = classes as Record<string, string>;\nMenu.displayName = '@mantine/core/Menu';\nMenu.Item = MenuItem;\nMenu.Label = MenuLabel;\nMenu.Dropdown = MenuDropdown;\nMenu.Target = MenuTarget;\nMenu.Divider = MenuDivider;\nMenu.Sub = MenuSub;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}