{"ast":null,"code":"'use client';\n\nimport { splitTimeString } from '../split-time-string/split-time-string.mjs';\nfunction convertTimeTo12HourFormat({\n  hours,\n  minutes,\n  seconds,\n  amPmLabels\n}) {\n  if (hours === null) {\n    return {\n      hours: null,\n      minutes: null,\n      seconds: null,\n      amPm: null\n    };\n  }\n  const amPm = hours >= 12 ? amPmLabels.pm : amPmLabels.am;\n  const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n  return {\n    hours: hour12,\n    minutes: typeof minutes === \"number\" ? minutes : null,\n    seconds: typeof seconds === \"number\" ? seconds : null,\n    amPm\n  };\n}\nfunction getParsedTime({\n  time,\n  format,\n  amPmLabels\n}) {\n  if (time === \"\") {\n    return {\n      hours: null,\n      minutes: null,\n      seconds: null,\n      amPm: null\n    };\n  }\n  const {\n    hours,\n    minutes,\n    seconds\n  } = splitTimeString(time);\n  const parsed = {\n    hours,\n    minutes,\n    seconds\n  };\n  if (format === \"12h\") {\n    return convertTimeTo12HourFormat({\n      ...parsed,\n      amPmLabels\n    });\n  }\n  return {\n    ...parsed,\n    amPm: null\n  };\n}\nexport { convertTimeTo12HourFormat, getParsedTime };","map":{"version":3,"names":["convertTimeTo12HourFormat","hours","minutes","seconds","amPmLabels","amPm","pm","am","hour12","getParsedTime","time","format","splitTimeString","parsed"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimePicker/utils/get-parsed-time/get-parsed-time.ts"],"sourcesContent":["import { TimePickerAmPmLabels, TimePickerFormat } from '../../TimePicker.types';\nimport { splitTimeString } from '../split-time-string/split-time-string';\n\ninterface GetParsedTimeInput {\n  time: string;\n  format: TimePickerFormat;\n  amPmLabels: TimePickerAmPmLabels;\n}\n\ninterface ConvertTimeTo12HourFormatInput {\n  hours: number | null;\n  minutes: number | null;\n  seconds: number | null;\n  amPmLabels: TimePickerAmPmLabels;\n}\n\nexport function convertTimeTo12HourFormat({\n  hours,\n  minutes,\n  seconds,\n  amPmLabels,\n}: ConvertTimeTo12HourFormatInput) {\n  if (hours === null) {\n    return { hours: null, minutes: null, seconds: null, amPm: null };\n  }\n\n  const amPm = hours >= 12 ? amPmLabels.pm : amPmLabels.am;\n  const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n\n  return {\n    hours: hour12,\n    minutes: typeof minutes === 'number' ? minutes : null,\n    seconds: typeof seconds === 'number' ? seconds : null,\n    amPm,\n  };\n}\n\nexport function getParsedTime({ time, format, amPmLabels }: GetParsedTimeInput) {\n  if (time === '') {\n    return { hours: null, minutes: null, seconds: null, amPm: null };\n  }\n\n  const { hours, minutes, seconds } = splitTimeString(time);\n\n  const parsed = { hours, minutes, seconds };\n\n  if (format === '12h') {\n    return convertTimeTo12HourFormat({ ...parsed, amPmLabels });\n  }\n\n  return { ...parsed, amPm: null };\n}\n"],"mappings":";;;AAgBO,SAASA,yBAA0BA,CAAA;EACxCC,KAAA;EACAC,OAAA;EACAC,OAAA;EACAC;AACF,CAAmC;EACjC,IAAIH,KAAA,KAAU,IAAM;IACX;MAAEA,KAAA,EAAO,IAAM;MAAAC,OAAA,EAAS;MAAMC,OAAS;MAAME,IAAA,EAAM;IAAK;EAAA;EAGjE,MAAMA,IAAO,GAAAJ,KAAA,IAAS,EAAK,GAAAG,UAAA,CAAWE,EAAA,GAAKF,UAAW,CAAAG,EAAA;EACtD,MAAMC,MAAS,GAAAP,KAAA,GAAQ,EAAO,SAAI,KAAKA,KAAQ;EAExC;IACLA,KAAO,EAAAO,MAAA;IACPN,OAAS,SAAOA,OAAY,gBAAWA,OAAU;IACjDC,OAAS,SAAOA,OAAY,gBAAWA,OAAU;IACjDE;EACF;AACF;AAEO,SAASI,aAAcA,CAAA;EAAEC,IAAM;EAAAC,MAAA;EAAQP;AAAA,CAAkC;EAC9E,IAAIM,IAAA,KAAS,EAAI;IACR;MAAET,KAAA,EAAO,IAAM;MAAAC,OAAA,EAAS;MAAMC,OAAS;MAAME,IAAA,EAAM;IAAK;EAAA;EAGjE,MAAM;IAAEJ,KAAO;IAAAC,OAAA;IAASC;EAAQ,IAAIS,eAAA,CAAgBF,IAAI;EAExD,MAAMG,MAAS;IAAEZ,KAAO;IAAAC,OAAA;IAASC;EAAQ;EAEzC,IAAIQ,MAAA,KAAW,KAAO;IACpB,OAAOX,yBAA0B;MAAE,GAAGa,MAAA;MAAQT;IAAA,CAAY;EAAA;EAG5D,OAAO;IAAE,GAAGS,MAAQ;IAAAR,IAAA,EAAM;EAAK;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}