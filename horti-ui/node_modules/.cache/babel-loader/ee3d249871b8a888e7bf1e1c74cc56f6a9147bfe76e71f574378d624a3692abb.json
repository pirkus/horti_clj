{"ast":null,"code":"'use client';\n\nimport { useRef, useState, useEffect } from 'react';\nimport { clampTime } from './utils/clamp-time/clamp-time.mjs';\nimport { getParsedTime, convertTimeTo12HourFormat } from './utils/get-parsed-time/get-parsed-time.mjs';\nimport { getTimeString } from './utils/get-time-string/get-time-string.mjs';\nfunction useTimePicker({\n  value,\n  defaultValue,\n  onChange,\n  format,\n  amPmLabels,\n  withSeconds = false,\n  min,\n  max,\n  clearable,\n  readOnly,\n  disabled,\n  pasteSplit\n}) {\n  const parsedTime = getParsedTime({\n    time: value || defaultValue || \"\",\n    amPmLabels,\n    format\n  });\n  const acceptChange = useRef(true);\n  const [hours, setHours] = useState(parsedTime.hours);\n  const [minutes, setMinutes] = useState(parsedTime.minutes);\n  const [seconds, setSeconds] = useState(parsedTime.seconds);\n  const [amPm, setAmPm] = useState(parsedTime.amPm);\n  const isClearable = clearable && !readOnly && !disabled && (hours !== null || minutes !== null || seconds !== null || amPm !== null);\n  const hoursRef = useRef(null);\n  const minutesRef = useRef(null);\n  const secondsRef = useRef(null);\n  const amPmRef = useRef(null);\n  const focus = field => {\n    if (field === \"hours\") {\n      hoursRef.current?.focus();\n    }\n    if (field === \"minutes\") {\n      minutesRef.current?.focus();\n    }\n    if (field === \"seconds\") {\n      secondsRef.current?.focus();\n    }\n    if (field === \"amPm\") {\n      amPmRef.current?.focus();\n    }\n  };\n  const handleTimeChange = (field, val) => {\n    const computedValue = {\n      hours,\n      minutes,\n      seconds,\n      amPm,\n      [field]: val\n    };\n    const timeString = getTimeString({\n      ...computedValue,\n      format,\n      withSeconds,\n      amPmLabels\n    });\n    if (timeString.valid) {\n      acceptChange.current = false;\n      const clamped = clampTime(timeString.value, min || \"00:00:00\", max || \"23:59:59\");\n      const converted = format === \"12h\" ? convertTimeTo12HourFormat({\n        hours: clamped.hours,\n        minutes: clamped.minutes,\n        seconds: clamped.seconds,\n        amPmLabels\n      }) : clamped;\n      setHours(converted.hours);\n      setMinutes(converted.minutes);\n      setSeconds(converted.seconds);\n      onChange?.(clamped.timeString);\n    } else {\n      acceptChange.current = false;\n      if (typeof value === \"string\" && value !== \"\") {\n        onChange?.(\"\");\n      }\n    }\n  };\n  const setTimeString = timeString => {\n    acceptChange.current = false;\n    const parsedTime2 = getParsedTime({\n      time: timeString,\n      amPmLabels,\n      format\n    });\n    setHours(parsedTime2.hours);\n    setMinutes(parsedTime2.minutes);\n    setSeconds(parsedTime2.seconds);\n    setAmPm(parsedTime2.amPm);\n    onChange?.(timeString);\n  };\n  const onHoursChange = value2 => {\n    setHours(value2);\n    handleTimeChange(\"hours\", value2);\n    focus(\"hours\");\n  };\n  const onMinutesChange = value2 => {\n    setMinutes(value2);\n    handleTimeChange(\"minutes\", value2);\n    focus(\"minutes\");\n  };\n  const onSecondsChange = value2 => {\n    setSeconds(value2);\n    handleTimeChange(\"seconds\", value2);\n    focus(\"seconds\");\n  };\n  const onAmPmChange = value2 => {\n    setAmPm(value2);\n    handleTimeChange(\"amPm\", value2);\n    focus(\"amPm\");\n  };\n  const clear = () => {\n    acceptChange.current = false;\n    setHours(null);\n    setMinutes(null);\n    setSeconds(null);\n    setAmPm(null);\n    onChange?.(\"\");\n    focus(\"hours\");\n  };\n  const onPaste = event => {\n    event.preventDefault();\n    const pastedValue = event.clipboardData.getData(\"text\");\n    const parsedTime2 = (pasteSplit || getParsedTime)({\n      time: pastedValue,\n      format,\n      amPmLabels\n    });\n    const timeString = getTimeString({\n      ...parsedTime2,\n      format,\n      withSeconds,\n      amPmLabels\n    });\n    if (timeString.valid) {\n      acceptChange.current = false;\n      const clamped = clampTime(timeString.value, min || \"00:00:00\", max || \"23:59:59\");\n      onChange?.(clamped.timeString);\n      setHours(parsedTime2.hours);\n      setMinutes(parsedTime2.minutes);\n      setSeconds(parsedTime2.seconds);\n      setAmPm(parsedTime2.amPm);\n    }\n  };\n  const hiddenInputValue = getTimeString({\n    hours,\n    minutes,\n    seconds,\n    format,\n    withSeconds,\n    amPm,\n    amPmLabels\n  });\n  useEffect(() => {\n    if (acceptChange.current && typeof value === \"string\") {\n      const parsedTime2 = getParsedTime({\n        time: value || \"\",\n        amPmLabels,\n        format\n      });\n      setHours(parsedTime2.hours);\n      setMinutes(parsedTime2.minutes);\n      setSeconds(parsedTime2.seconds);\n      setAmPm(parsedTime2.amPm);\n    }\n    acceptChange.current = true;\n  }, [value]);\n  return {\n    refs: {\n      hours: hoursRef,\n      minutes: minutesRef,\n      seconds: secondsRef,\n      amPm: amPmRef\n    },\n    values: {\n      hours,\n      minutes,\n      seconds,\n      amPm\n    },\n    setHours: onHoursChange,\n    setMinutes: onMinutesChange,\n    setSeconds: onSecondsChange,\n    setAmPm: onAmPmChange,\n    focus,\n    clear,\n    onPaste,\n    setTimeString,\n    isClearable,\n    hiddenInputValue: hiddenInputValue.value\n  };\n}\nexport { useTimePicker };","map":{"version":3,"names":["useTimePicker","value","defaultValue","onChange","format","amPmLabels","withSeconds","min","max","clearable","readOnly","disabled","pasteSplit","parsedTime","getParsedTime","time","acceptChange","useRef","hours","setHours","useState","minutes","setMinutes","seconds","setSeconds","amPm","setAmPm","isClearable","hoursRef","minutesRef","secondsRef","amPmRef","focus","field","current","handleTimeChange","val","computedValue","timeString","getTimeString","valid","clamped","clampTime","converted","convertTimeTo12HourFormat","setTimeString","parsedTime2","onHoursChange","value2","onMinutesChange","onSecondsChange","onAmPmChange","clear","onPaste","event","preventDefault","pastedValue","clipboardData","getData","hiddenInputValue","useEffect","refs","values"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimePicker/use-time-picker.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport type {\n  TimePickerAmPmLabels,\n  TimePickerFormat,\n  TimePickerPasteSplit,\n} from './TimePicker.types';\nimport { clampTime } from './utils/clamp-time/clamp-time';\nimport { convertTimeTo12HourFormat, getParsedTime } from './utils/get-parsed-time/get-parsed-time';\nimport { getTimeString } from './utils/get-time-string/get-time-string';\n\ninterface UseTimePickerInput {\n  value: string | undefined;\n  defaultValue: string | undefined;\n  onChange: ((value: string) => void) | undefined;\n  format: TimePickerFormat;\n  amPmLabels: TimePickerAmPmLabels;\n  withSeconds: boolean | undefined;\n  min: string | undefined;\n  max: string | undefined;\n  readOnly: boolean | undefined;\n  disabled: boolean | undefined;\n  clearable: boolean | undefined;\n  pasteSplit: TimePickerPasteSplit | undefined;\n}\n\nexport function useTimePicker({\n  value,\n  defaultValue,\n  onChange,\n  format,\n  amPmLabels,\n  withSeconds = false,\n  min,\n  max,\n  clearable,\n  readOnly,\n  disabled,\n  pasteSplit,\n}: UseTimePickerInput) {\n  const parsedTime = getParsedTime({\n    time: value || defaultValue || '',\n    amPmLabels,\n    format,\n  });\n\n  const acceptChange = useRef(true);\n\n  const [hours, setHours] = useState<number | null>(parsedTime.hours);\n  const [minutes, setMinutes] = useState<number | null>(parsedTime.minutes);\n  const [seconds, setSeconds] = useState<number | null>(parsedTime.seconds);\n  const [amPm, setAmPm] = useState<string | null>(parsedTime.amPm);\n\n  const isClearable =\n    clearable &&\n    !readOnly &&\n    !disabled &&\n    (hours !== null || minutes !== null || seconds !== null || amPm !== null);\n\n  const hoursRef = useRef<HTMLInputElement>(null);\n  const minutesRef = useRef<HTMLInputElement>(null);\n  const secondsRef = useRef<HTMLInputElement>(null);\n  const amPmRef = useRef<HTMLSelectElement>(null);\n\n  const focus = (field: 'hours' | 'minutes' | 'seconds' | 'amPm') => {\n    if (field === 'hours') {\n      hoursRef.current?.focus();\n    }\n\n    if (field === 'minutes') {\n      minutesRef.current?.focus();\n    }\n\n    if (field === 'seconds') {\n      secondsRef.current?.focus();\n    }\n\n    if (field === 'amPm') {\n      amPmRef.current?.focus();\n    }\n  };\n\n  const handleTimeChange = (field: 'hours' | 'minutes' | 'seconds' | 'amPm', val: any) => {\n    const computedValue = { hours, minutes, seconds, amPm, [field]: val };\n\n    const timeString = getTimeString({ ...computedValue, format, withSeconds, amPmLabels });\n\n    if (timeString.valid) {\n      acceptChange.current = false;\n      const clamped = clampTime(timeString.value, min || '00:00:00', max || '23:59:59');\n      const converted =\n        format === '12h'\n          ? convertTimeTo12HourFormat({\n              hours: clamped.hours,\n              minutes: clamped.minutes,\n              seconds: clamped.seconds,\n              amPmLabels,\n            })\n          : clamped;\n      setHours(converted.hours);\n      setMinutes(converted.minutes);\n      setSeconds(converted.seconds);\n      onChange?.(clamped.timeString);\n    } else {\n      acceptChange.current = false;\n      if (typeof value === 'string' && value !== '') {\n        onChange?.('');\n      }\n    }\n  };\n\n  const setTimeString = (timeString: string) => {\n    acceptChange.current = false;\n\n    const parsedTime = getParsedTime({ time: timeString, amPmLabels, format });\n    setHours(parsedTime.hours);\n    setMinutes(parsedTime.minutes);\n    setSeconds(parsedTime.seconds);\n    setAmPm(parsedTime.amPm);\n\n    onChange?.(timeString);\n  };\n\n  const onHoursChange = (value: number | null) => {\n    setHours(value);\n    handleTimeChange('hours', value);\n    focus('hours');\n  };\n\n  const onMinutesChange = (value: number | null) => {\n    setMinutes(value);\n    handleTimeChange('minutes', value);\n    focus('minutes');\n  };\n\n  const onSecondsChange = (value: number | null) => {\n    setSeconds(value);\n    handleTimeChange('seconds', value);\n    focus('seconds');\n  };\n\n  const onAmPmChange = (value: string | null) => {\n    setAmPm(value);\n    handleTimeChange('amPm', value);\n    focus('amPm');\n  };\n\n  const clear = () => {\n    acceptChange.current = false;\n    setHours(null);\n    setMinutes(null);\n    setSeconds(null);\n    setAmPm(null);\n    onChange?.('');\n    focus('hours');\n  };\n\n  const onPaste = (event: React.ClipboardEvent<any>) => {\n    event.preventDefault();\n    const pastedValue = event.clipboardData.getData('text');\n    const parsedTime = (pasteSplit || getParsedTime)({ time: pastedValue, format, amPmLabels });\n    const timeString = getTimeString({ ...parsedTime, format, withSeconds, amPmLabels });\n    if (timeString.valid) {\n      acceptChange.current = false;\n      const clamped = clampTime(timeString.value, min || '00:00:00', max || '23:59:59');\n      onChange?.(clamped.timeString);\n      setHours(parsedTime.hours);\n      setMinutes(parsedTime.minutes);\n      setSeconds(parsedTime.seconds);\n      setAmPm(parsedTime.amPm);\n    }\n  };\n\n  const hiddenInputValue = getTimeString({\n    hours,\n    minutes,\n    seconds,\n    format,\n    withSeconds,\n    amPm,\n    amPmLabels: amPmLabels!,\n  });\n\n  useEffect(() => {\n    if (acceptChange.current && typeof value === 'string') {\n      const parsedTime = getParsedTime({ time: value || '', amPmLabels, format });\n      setHours(parsedTime.hours);\n      setMinutes(parsedTime.minutes);\n      setSeconds(parsedTime.seconds);\n      setAmPm(parsedTime.amPm);\n    }\n    acceptChange.current = true;\n  }, [value]);\n\n  return {\n    refs: { hours: hoursRef, minutes: minutesRef, seconds: secondsRef, amPm: amPmRef },\n    values: { hours, minutes, seconds, amPm },\n    setHours: onHoursChange,\n    setMinutes: onMinutesChange,\n    setSeconds: onSecondsChange,\n    setAmPm: onAmPmChange,\n    focus,\n    clear,\n    onPaste,\n    setTimeString,\n    isClearable,\n    hiddenInputValue: hiddenInputValue.value,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}