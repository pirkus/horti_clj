{"ast":null,"code":"'use client';\n\nimport dayjs from 'dayjs';\nfunction defaultDateFormatter({\n  type,\n  date,\n  locale,\n  format,\n  labelSeparator\n}) {\n  const formatDate = value => dayjs(value).locale(locale).format(format);\n  if (type === \"default\") {\n    return date === null ? \"\" : formatDate(date);\n  }\n  if (type === \"multiple\") {\n    return date.map(formatDate).join(\", \");\n  }\n  if (type === \"range\" && Array.isArray(date)) {\n    if (date[0] && date[1]) {\n      return `${formatDate(date[0])} ${labelSeparator} ${formatDate(date[1])}`;\n    }\n    if (date[0]) {\n      return `${formatDate(date[0])} ${labelSeparator} `;\n    }\n    return \"\";\n  }\n  return \"\";\n}\nfunction getFormattedDate({\n  formatter,\n  ...others\n}) {\n  return (formatter || defaultDateFormatter)(others);\n}\nexport { defaultDateFormatter, getFormattedDate };","map":{"version":3,"names":["defaultDateFormatter","type","date","locale","format","labelSeparator","formatDate","value","dayjs","map","join","Array","isArray","getFormattedDate","formatter","others"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/utils/get-formatted-date/get-formatted-date.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport { DatePickerType, DatePickerValue, DateStringValue } from '../../types';\n\ninterface DateFormatterInput {\n  type: DatePickerType;\n  date: DatePickerValue<DatePickerType>;\n  locale: string;\n  format: string;\n  labelSeparator: string;\n}\n\nexport type DateFormatter = (input: DateFormatterInput) => string;\n\nexport function defaultDateFormatter({\n  type,\n  date,\n  locale,\n  format,\n  labelSeparator,\n}: DateFormatterInput) {\n  const formatDate = (value: DateStringValue | Date) => dayjs(value).locale(locale).format(format);\n\n  if (type === 'default') {\n    return date === null ? '' : formatDate(date as DateStringValue);\n  }\n\n  if (type === 'multiple') {\n    return (date as DateStringValue[]).map(formatDate).join(', ');\n  }\n\n  if (type === 'range' && Array.isArray(date)) {\n    if (date[0] && date[1]) {\n      return `${formatDate(date[0])} ${labelSeparator} ${formatDate(date[1])}`;\n    }\n\n    if (date[0]) {\n      return `${formatDate(date[0])} ${labelSeparator} `;\n    }\n\n    return '';\n  }\n\n  return '';\n}\n\ninterface GetFormattedDateInput extends DateFormatterInput {\n  formatter?: DateFormatter;\n}\n\nexport function getFormattedDate({ formatter, ...others }: GetFormattedDateInput) {\n  return (formatter || defaultDateFormatter)(others);\n}\n"],"mappings":";;;AAaO,SAASA,oBAAqBA,CAAA;EACnCC,IAAA;EACAC,IAAA;EACAC,MAAA;EACAC,MAAA;EACAC;AACF,CAAuB;EACf,MAAAC,UAAA,GAAcC,KAAA,IAAkCC,KAAM,CAAAD,KAAK,EAAEJ,MAAO,CAAAA,MAAM,CAAE,CAAAC,MAAA,CAAOA,MAAM;EAE/F,IAAIH,IAAA,KAAS,SAAW;IACtB,OAAOC,IAAS,YAAO,EAAK,GAAAI,UAAA,CAAWJ,IAAuB;EAAA;EAGhE,IAAID,IAAA,KAAS,UAAY;IACvB,OAAQC,IAA2B,CAAAO,GAAA,CAAIH,UAAU,EAAEI,IAAA,CAAK,IAAI;EAAA;EAG9D,IAAIT,IAAS,gBAAWU,KAAM,CAAAC,OAAA,CAAQV,IAAI,CAAG;IAC3C,IAAIA,IAAK,EAAC,CAAK,IAAAA,IAAA,CAAK,CAAC,CAAG;MACtB,OAAO,GAAGI,UAAA,CAAWJ,IAAK,EAAC,CAAC,CAAC,IAAIG,cAAc,IAAIC,UAAA,CAAWJ,IAAK,EAAC,CAAC,CAAC;IAAA;IAGpE,IAAAA,IAAA,CAAK,CAAC,CAAG;MACX,OAAO,GAAGI,UAAW,CAAAJ,IAAA,CAAK,CAAC,CAAC,CAAC,IAAIG,cAAc;IAAA;IAG1C;EAAA;EAGF;AACT;AAMO,SAASQ,gBAAiBA,CAAA;EAAEC,SAAW;EAAA,GAAGC;AAAA,CAAiC;EACxE,QAAAD,SAAA,IAAad,oBAAA,EAAsBe,MAAM;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}