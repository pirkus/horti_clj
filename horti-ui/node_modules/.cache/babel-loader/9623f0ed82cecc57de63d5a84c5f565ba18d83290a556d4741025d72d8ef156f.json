{"ast":null,"code":"'use client';\n\nimport { padTime } from '../pad-time/pad-time.mjs';\nfunction timeToSeconds(timeStr) {\n  const [hours = 0, minutes = 0, seconds = 0] = timeStr.split(\":\").map(Number);\n  return hours * 3600 + minutes * 60 + seconds;\n}\nfunction secondsToTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const secs = seconds % 60;\n  return {\n    timeString: `${padTime(hours)}:${padTime(minutes)}:${padTime(secs)}`,\n    hours,\n    minutes,\n    seconds: secs\n  };\n}\nexport { secondsToTime, timeToSeconds };","map":{"version":3,"names":["timeToSeconds","timeStr","hours","minutes","seconds","split","map","Number","secondsToTime","Math","floor","secs","timeString","padTime"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimePicker/utils/time-to-seconds/time-to-seconds.ts"],"sourcesContent":["import { padTime } from '../pad-time/pad-time';\n\nexport function timeToSeconds(timeStr: string): number {\n  const [hours = 0, minutes = 0, seconds = 0] = timeStr.split(':').map(Number);\n  return hours * 3600 + minutes * 60 + seconds;\n}\n\nexport function secondsToTime(seconds: number) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n\n  return {\n    timeString: `${padTime(hours)}:${padTime(minutes)}:${padTime(secs)}`,\n    hours,\n    minutes,\n    seconds: secs,\n  };\n}\n"],"mappings":";;;AAEO,SAASA,cAAcC,OAAyB;EACrD,MAAM,CAACC,KAAA,GAAQ,CAAG,EAAAC,OAAA,GAAU,CAAG,EAAAC,OAAA,GAAU,CAAC,IAAIH,OAAQ,CAAAI,KAAA,CAAM,GAAG,EAAEC,GAAA,CAAIC,MAAM;EACpE,OAAAL,KAAA,GAAQ,IAAO,GAAAC,OAAA,GAAU,EAAK,GAAAC,OAAA;AACvC;AAEO,SAASI,cAAcJ,OAAiB;EAC7C,MAAMF,KAAQ,GAAAO,IAAA,CAAKC,KAAM,CAAAN,OAAA,GAAU,IAAI;EACvC,MAAMD,OAAU,GAAAM,IAAA,CAAKC,KAAO,CAAAN,OAAA,GAAU,OAAQ,EAAE;EAChD,MAAMO,IAAA,GAAOP,OAAU;EAEhB;IACLQ,UAAY,KAAGC,OAAQ,CAAAX,KAAK,CAAC,IAAIW,OAAQ,CAAAV,OAAO,CAAC,IAAIU,OAAQ,CAAAF,IAAI,CAAC;IAClET,KAAA;IACAC,OAAA;IACAC,OAAS,EAAAO;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}