{"ast":null,"code":"'use client';\n\nimport { padTime } from '../../TimePicker/utils/pad-time/pad-time.mjs';\nimport { splitTimeString } from '../../TimePicker/utils/split-time-string/split-time-string.mjs';\nfunction getTimeFromDate(date, withSeconds) {\n  return `${date.getHours()}:${date.getMinutes()}${withSeconds ? `:${date.getSeconds()}` : \"\"}`;\n}\nfunction getFormattedTime({\n  value,\n  format,\n  amPmLabels,\n  withSeconds\n}) {\n  const splitted = splitTimeString(typeof value === \"string\" ? value : getTimeFromDate(value, withSeconds));\n  if (splitted.hours === null || splitted.minutes === null) {\n    return null;\n  }\n  if (format === \"24h\") {\n    return `${padTime(splitted.hours)}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : \"\"}`;\n  }\n  const isPm = splitted.hours >= 12;\n  const hours = splitted.hours % 12 === 0 ? 12 : splitted.hours % 12;\n  return `${hours}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : \"\"} ${isPm ? amPmLabels.pm : amPmLabels.am}`;\n}\nexport { getFormattedTime };","map":{"version":3,"names":["getTimeFromDate","date","withSeconds","getHours","getMinutes","getSeconds","getFormattedTime","value","format","amPmLabels","splitted","splitTimeString","hours","minutes","padTime","seconds","isPm","pm","am"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimeValue/get-formatted-time/get-formatted-time.ts"],"sourcesContent":["import type { TimePickerAmPmLabels, TimePickerFormat } from '../../TimePicker';\nimport { padTime } from '../../TimePicker/utils/pad-time/pad-time';\nimport { splitTimeString } from '../../TimePicker/utils/split-time-string/split-time-string';\n\nfunction getTimeFromDate(date: Date, withSeconds: boolean) {\n  return `${date.getHours()}:${date.getMinutes()}${withSeconds ? `:${date.getSeconds()}` : ''}`;\n}\n\nexport interface GetFormattedTimeInput {\n  value: string | Date;\n  format: TimePickerFormat;\n  amPmLabels: TimePickerAmPmLabels;\n  withSeconds: boolean;\n}\n\nexport function getFormattedTime({\n  value,\n  format,\n  amPmLabels,\n  withSeconds,\n}: GetFormattedTimeInput) {\n  const splitted = splitTimeString(\n    typeof value === 'string' ? value : getTimeFromDate(value, withSeconds)\n  );\n\n  if (splitted.hours === null || splitted.minutes === null) {\n    return null;\n  }\n\n  if (format === '24h') {\n    return `${padTime(splitted.hours)}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : ''}`;\n  }\n\n  const isPm = splitted.hours >= 12;\n  const hours = splitted.hours % 12 === 0 ? 12 : splitted.hours % 12;\n\n  return `${hours}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : ''} ${\n    isPm ? amPmLabels.pm : amPmLabels.am\n  }`;\n}\n"],"mappings":";;;;AAIA,SAASA,gBAAgBC,IAAA,EAAYC,WAAsB;EACzD,OAAO,GAAGD,IAAA,CAAKE,QAAS,CAAC,KAAIF,IAAK,CAAAG,UAAA,CAAY,IAAGF,WAAA,GAAc,IAAID,IAAA,CAAKI,UAAW,EAAC,KAAK,EAAE;AAC7F;AASO,SAASC,gBAAiBA,CAAA;EAC/BC,KAAA;EACAC,MAAA;EACAC,UAAA;EACAP;AACF,CAA0B;EACxB,MAAMQ,QAAW,GAAAC,eAAA,CACf,OAAOJ,KAAU,gBAAWA,KAAQ,GAAAP,eAAA,CAAgBO,KAAA,EAAOL,WAAW,CACxE;EAEA,IAAIQ,QAAS,CAAAE,KAAA,KAAU,IAAQ,IAAAF,QAAA,CAASG,OAAA,KAAY,IAAM;IACjD;EAAA;EAGT,IAAIL,MAAA,KAAW,KAAO;IACpB,OAAO,GAAGM,OAAQ,CAAAJ,QAAA,CAASE,KAAK,CAAC,IAAIE,OAAA,CAAQJ,QAAS,CAAAG,OAAO,CAAC,GAAGX,WAAA,GAAc,IAAIY,OAAQ,CAAAJ,QAAA,CAASK,OAAA,IAAW,CAAC,CAAC,KAAK,EAAE;EAAA;EAGpH,MAAAC,IAAA,GAAON,QAAA,CAASE,KAAS;EAC/B,MAAMA,KAAA,GAAQF,QAAS,CAAAE,KAAA,GAAQ,OAAO,CAAI,QAAKF,QAAA,CAASE,KAAQ;EAEzD,UAAGA,KAAK,IAAIE,OAAA,CAAQJ,QAAA,CAASG,OAAO,CAAC,GAAGX,WAAA,GAAc,IAAIY,OAAA,CAAQJ,QAAA,CAASK,OAAW,KAAC,CAAC,EAAK,KAAE,IACpGC,IAAO,GAAAP,UAAA,CAAWQ,EAAK,GAAAR,UAAA,CAAWS,EACpC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}