{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport 'dayjs';\nimport { toDateTimeString, toDateString } from '../../utils/to-date-string/to-date-string.mjs';\nfunction formatValue({\n  value,\n  type,\n  withTime\n}) {\n  const formatter = withTime ? toDateTimeString : toDateString;\n  if (type === \"range\" && Array.isArray(value)) {\n    const startDate = formatter(value[0]);\n    const endDate = formatter(value[1]);\n    if (!startDate) {\n      return \"\";\n    }\n    if (!endDate) {\n      return `${startDate} \\u2013`;\n    }\n    return `${startDate} \\u2013 ${endDate}`;\n  }\n  if (type === \"multiple\" && Array.isArray(value)) {\n    return value.filter(Boolean).join(\", \");\n  }\n  if (!Array.isArray(value) && value) {\n    return formatter(value);\n  }\n  return \"\";\n}\nfunction HiddenDatesInput({\n  value,\n  type,\n  name,\n  form,\n  withTime = false\n}) {\n  return /* @__PURE__ */jsx(\"input\", {\n    type: \"hidden\",\n    value: formatValue({\n      value,\n      type,\n      withTime\n    }),\n    name,\n    form\n  });\n}\nHiddenDatesInput.displayName = \"@mantine/dates/HiddenDatesInput\";\nexport { HiddenDatesInput };","map":{"version":3,"names":["formatValue","value","type","withTime","formatter","toDateTimeString","toDateString","Array","isArray","startDate","endDate","filter","Boolean","join","HiddenDatesInput","name","form","jsx","displayName"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/HiddenDatesInput/HiddenDatesInput.tsx"],"sourcesContent":["import { DatePickerType, DatesRangeValue, DateValue } from '../../types';\nimport { toDateString, toDateTimeString } from '../../utils';\n\nexport type HiddenDatesInputValue = DatesRangeValue | DateValue | DateValue[];\n\nexport interface HiddenDatesInputProps {\n  value: HiddenDatesInputValue;\n  type: DatePickerType;\n  name: string | undefined;\n  form: string | undefined;\n  withTime?: boolean;\n}\n\ninterface FormatValueInput {\n  value: HiddenDatesInputValue;\n  type: DatePickerType;\n  withTime: boolean;\n}\n\nfunction formatValue({ value, type, withTime }: FormatValueInput) {\n  const formatter = withTime ? toDateTimeString : toDateString;\n\n  if (type === 'range' && Array.isArray(value)) {\n    const startDate = formatter(value[0]);\n    const endDate = formatter(value[1]);\n\n    if (!startDate) {\n      return '';\n    }\n\n    if (!endDate) {\n      return `${startDate} –`;\n    }\n\n    return `${startDate} – ${endDate}`;\n  }\n\n  if (type === 'multiple' && Array.isArray(value)) {\n    return value.filter(Boolean).join(', ');\n  }\n\n  if (!Array.isArray(value) && value) {\n    return formatter(value)!;\n  }\n\n  return '';\n}\n\nexport function HiddenDatesInput({\n  value,\n  type,\n  name,\n  form,\n  withTime = false,\n}: HiddenDatesInputProps) {\n  return (\n    <input type=\"hidden\" value={formatValue({ value, type, withTime })} name={name} form={form} />\n  );\n}\n\nHiddenDatesInput.displayName = '@mantine/dates/HiddenDatesInput';\n"],"mappings":";;;;;AAmBA,SAASA,WAAYA,CAAA;EAAEC,KAAO;EAAAC,IAAA;EAAMC;AAAA,CAA8B;EAC1D,MAAAC,SAAA,GAAYD,QAAA,GAAWE,gBAAmB,GAAAC,YAAA;EAEhD,IAAIJ,IAAS,gBAAWK,KAAM,CAAAC,OAAA,CAAQP,KAAK,CAAG;IAC5C,MAAMQ,SAAY,GAAAL,SAAA,CAAUH,KAAM,EAAC,CAAC;IACpC,MAAMS,OAAU,GAAAN,SAAA,CAAUH,KAAM,EAAC,CAAC;IAElC,IAAI,CAACQ,SAAW;MACP;IAAA;IAGT,IAAI,CAACC,OAAS;MACZ,OAAO,GAAGD,SAAS;IAAA;IAGd,UAAGA,SAAS,WAAMC,OAAO;EAAA;EAGlC,IAAIR,IAAS,mBAAcK,KAAM,CAAAC,OAAA,CAAQP,KAAK,CAAG;IAC/C,OAAOA,KAAM,CAAAU,MAAA,CAAOC,OAAO,EAAEC,IAAA,CAAK,IAAI;EAAA;EAGxC,IAAI,CAACN,KAAA,CAAMC,OAAQ,CAAAP,KAAK,KAAKA,KAAO;IAClC,OAAOG,SAAA,CAAUH,KAAK;EAAA;EAGjB;AACT;AAEO,SAASa,gBAAiBA,CAAA;EAC/Bb,KAAA;EACAC,IAAA;EACAa,IAAA;EACAC,IAAA;EACAb,QAAW;AACb,CAA0B;EACxB,sBACGc,GAAA;IAAMf,IAAK;IAASD,KAAO,EAAAD,WAAA,CAAY;MAAEC,KAAA;MAAOC,IAAM;MAAAC;IAAA,CAAU;IAAGY,IAAA;IAAYC;EAAY;AAEhG;AAEAF,gBAAA,CAAiBI,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}