{"ast":null,"code":"var _jsxFileName = \"/home/filken/dev/horti_clj/horti-ui/src/components/GardenCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport { Box, Paper, Text, Button, Modal, TextInput, Grid, Select, Badge, Alert, Group, Stack, Textarea } from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport { IconChartLine, IconTimeline } from '@tabler/icons-react';\nimport { UserContext } from '../contexts/UserContext';\nimport MetricsViewer from './MetricsViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GardenCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [plants, setPlants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlant, setSelectedPlant] = useState(null);\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showMetrics, setShowMetrics] = useState(false);\n  const [showMetricsViewer, setShowMetricsViewer] = useState(false);\n  const [canvasSize] = useState({\n    width: 800,\n    height: 600\n  });\n\n  // Enhanced drag state with threshold detection\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedPlant, setDraggedPlant] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [mouseDownPos, setMouseDownPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [mouseDownPlant, setMouseDownPlant] = useState(null);\n  const [hasDraggedBeyondThreshold, setHasDraggedBeyondThreshold] = useState(false);\n  const DRAG_THRESHOLD = 5; // pixels\n\n  const [newPlant, setNewPlant] = useState({\n    type: '',\n    name: '',\n    x: 0,\n    y: 0\n  });\n  const [newMetrics, setNewMetrics] = useState({\n    date: new Date(),\n    time: new Date().toTimeString().slice(0, 5),\n    // HH:MM format\n    ec: '',\n    ph: '',\n    notes: ''\n  });\n  const {\n    token\n  } = useContext(UserContext);\n  const defaultPlantImages = [{\n    name: 'Tomato',\n    url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🍅'\n  }, {\n    name: 'Lettuce',\n    url: 'https://via.placeholder.com/50x50/66bb6a/ffffff?text=🥬'\n  }, {\n    name: 'Basil',\n    url: 'https://via.placeholder.com/50x50/8bc34a/ffffff?text=🌿'\n  }, {\n    name: 'Pepper',\n    url: 'https://via.placeholder.com/50x50/ff7043/ffffff?text=🌶️'\n  }, {\n    name: 'Spinach',\n    url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🥬'\n  }];\n  const fetchPlants = useCallback(async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPlants(data);\n      } else {\n        setError('Failed to fetch plants');\n      }\n    } catch (err) {\n      setError('Error connecting to server');\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (token) {\n      fetchPlants();\n    }\n  }, [token, fetchPlants]);\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.fillStyle = '#f1f8e9';\n    ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n\n    // Draw grid\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= canvasSize.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvasSize.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= canvasSize.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvasSize.width, y);\n      ctx.stroke();\n    }\n\n    // Draw plants\n    plants.forEach(plant => {\n      if (plant.x !== undefined && plant.y !== undefined) {\n        // Highlight dragged plant\n        const isBeingDragged = (draggedPlant === null || draggedPlant === void 0 ? void 0 : draggedPlant.id) === plant.id;\n        const isSelected = (selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.id) === plant.id;\n\n        // Draw plant circle with different colors for different states\n        if (isBeingDragged) {\n          ctx.fillStyle = '#2196f3'; // Blue when dragging\n        } else if (isSelected) {\n          ctx.fillStyle = '#ff9800'; // Orange when selected\n        } else {\n          ctx.fillStyle = '#4caf50'; // Green normally\n        }\n        ctx.beginPath();\n        ctx.arc(plant.x, plant.y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n\n        // Draw plant name\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(plant.name, plant.x, plant.y + 4);\n\n        // Draw drag indicator for dragged plant\n        if (isBeingDragged) {\n          ctx.strokeStyle = '#1976d2';\n          ctx.lineWidth = 2;\n          ctx.setLineDash([5, 5]);\n          ctx.beginPath();\n          ctx.arc(plant.x, plant.y, 30, 0, 2 * Math.PI);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n    });\n  }, [plants, selectedPlant, draggedPlant, canvasSize.width, canvasSize.height]);\n  useEffect(() => {\n    if (!loading) {\n      drawCanvas();\n    }\n  }, [loading, drawCanvas]);\n  const getMousePos = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  };\n  const findPlantAtPosition = (x, y) => {\n    return plants.find(plant => {\n      const distance = Math.sqrt((x - plant.x) ** 2 + (y - plant.y) ** 2);\n      return distance <= 25;\n    });\n  };\n  const updatePlantPosition = async (plantId, newX, newY) => {\n    try {\n      const response = await fetch(`/api/plants/${plantId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          x: newX,\n          y: newY\n        })\n      });\n      if (response.ok) {\n        // Update local state\n        setPlants(prev => prev.map(plant => plant.id === plantId ? {\n          ...plant,\n          x: newX,\n          y: newY\n        } : plant));\n      } else {\n        setError('Failed to update plant position');\n        // Revert to original position by refetching\n        fetchPlants();\n      }\n    } catch (err) {\n      setError('Error updating plant position');\n      fetchPlants();\n    }\n  };\n  const handleMouseDown = event => {\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n    if (clickedPlant) {\n      // Track initial mouse position and clicked plant for potential drag\n      setMouseDownPos(mousePos);\n      setMouseDownPlant(clickedPlant);\n      setDragOffset({\n        x: mousePos.x - clickedPlant.x,\n        y: mousePos.y - clickedPlant.y\n      });\n\n      // Change cursor to indicate potential drag\n      const canvas = canvasRef.current;\n      canvas.style.cursor = 'grabbing';\n    }\n  };\n  const handleMouseMove = event => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    if (mouseDownPlant && !isDragging) {\n      // Check if we've moved beyond the drag threshold\n      const distance = Math.sqrt(Math.pow(mousePos.x - mouseDownPos.x, 2) + Math.pow(mousePos.y - mouseDownPos.y, 2));\n      if (distance > DRAG_THRESHOLD) {\n        // Start actual dragging\n        setIsDragging(true);\n        setDraggedPlant(mouseDownPlant);\n        setHasDraggedBeyondThreshold(true);\n      }\n    }\n    if (isDragging && draggedPlant) {\n      // Update plant position in real-time during drag\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n\n      // Update local state for immediate visual feedback\n      setPlants(prev => prev.map(plant => plant.id === draggedPlant.id ? {\n        ...plant,\n        x: newX,\n        y: newY\n      } : plant));\n    } else if (!mouseDownPlant) {\n      // Update cursor based on what's under the mouse\n      const plantUnderMouse = findPlantAtPosition(mousePos.x, mousePos.y);\n      canvas.style.cursor = plantUnderMouse ? 'grab' : 'crosshair';\n    }\n  };\n  const handleMouseUp = async event => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    if (isDragging && draggedPlant) {\n      // Handle end of drag - save position to backend\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      await updatePlantPosition(draggedPlant.id, newX, newY);\n    } else if (mouseDownPlant && !hasDraggedBeyondThreshold) {\n      // This was a click, not a drag - open metrics dialog\n      setSelectedPlant(mouseDownPlant);\n      setShowMetrics(true);\n    }\n\n    // Reset all drag-related state\n    setIsDragging(false);\n    setDraggedPlant(null);\n    setMouseDownPlant(null);\n    setHasDraggedBeyondThreshold(false);\n    setDragOffset({\n      x: 0,\n      y: 0\n    });\n    setMouseDownPos({\n      x: 0,\n      y: 0\n    });\n    canvas.style.cursor = 'crosshair';\n  };\n  const handleCanvasClick = event => {\n    // Only handle clicks for adding new plants in empty space\n    // Plant clicks are now handled in handleMouseUp\n    if (isDragging || mouseDownPlant) return;\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n    if (!clickedPlant) {\n      // Add new plant at clicked position (empty space)\n      setNewPlant(prev => ({\n        ...prev,\n        x: mousePos.x,\n        y: mousePos.y\n      }));\n      setShowAddPlant(true);\n    }\n  };\n  const handleAddPlant = async () => {\n    if (!newPlant.type) return; // Require plant type\n\n    try {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: newPlant.name || newPlant.type,\n          // Use name if provided, otherwise use type\n          type: newPlant.type,\n          x: newPlant.x,\n          y: newPlant.y,\n          'planting-date': new Date().toISOString().split('T')[0]\n        })\n      });\n      if (response.ok) {\n        setShowAddPlant(false);\n        setNewPlant({\n          type: '',\n          name: '',\n          x: 0,\n          y: 0\n        });\n        fetchPlants();\n      } else {\n        setError('Failed to add plant');\n      }\n    } catch (err) {\n      setError('Error adding plant');\n    }\n  };\n  const handleAddMetrics = async () => {\n    if (!selectedPlant) return;\n    try {\n      // Combine date and time into a single timestamp\n      const dateStr = newMetrics.date.toISOString().split('T')[0];\n      const timestamp = new Date(`${dateStr}T${newMetrics.time}:00`).toISOString();\n      const response = await fetch(`/api/plants/${selectedPlant.id}/metrics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          'plant-id': selectedPlant.id,\n          date: timestamp,\n          ec: parseFloat(newMetrics.ec) || null,\n          ph: parseFloat(newMetrics.ph) || null,\n          notes: newMetrics.notes\n        })\n      });\n      if (response.ok) {\n        setShowMetrics(false);\n        setNewMetrics({\n          date: new Date(),\n          time: new Date().toTimeString().slice(0, 5),\n          ec: '',\n          ph: '',\n          notes: ''\n        });\n        setSelectedPlant(null);\n      } else {\n        setError('Failed to add metrics');\n      }\n    } catch (err) {\n      setError('Error adding metrics');\n    }\n  };\n  const handleViewMetrics = () => {\n    setShowMetrics(false);\n    setShowMetricsViewer(true);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(Text, {\n    children: \"Loading garden...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      shadow: \"md\",\n      p: \"md\",\n      mb: \"xl\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"xl\",\n        fw: 700,\n        c: \"teal\",\n        children: \"\\uD83C\\uDF31 Interactive Garden Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        c: \"dimmed\",\n        mb: \"md\",\n        children: \"Click anywhere to add a plant, drag plants to move them, or click on existing plants to log daily metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Group, {\n        spacing: \"xs\",\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"outline\",\n          color: \"teal\",\n          size: \"sm\",\n          children: \"\\uD83D\\uDCA1 Click empty space to add plants\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"outline\",\n          color: \"teal\",\n          size: \"sm\",\n          children: \"\\uD83D\\uDDB1\\uFE0F Drag plants to move them around\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"outline\",\n          color: \"teal\",\n          size: \"sm\",\n          children: \"\\uD83D\\uDCCA Click plants to log EC & pH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      color: \"red\",\n      mb: \"xl\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      shadow: \"md\",\n      p: \"md\",\n      style: {\n        display: 'inline-block'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: canvasSize.width,\n        height: canvasSize.height,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onClick: handleCanvasClick,\n        style: {\n          border: '2px solid #20c997',\n          borderRadius: '8px',\n          cursor: 'crosshair',\n          backgroundColor: '#f1f8e9'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      opened: showAddPlant,\n      onClose: () => setShowAddPlant(false),\n      title: `Add Plant at (${Math.round(newPlant.x)}, ${Math.round(newPlant.y)})`,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          label: \"Plant Type\",\n          placeholder: \"Select plant type\",\n          required: true,\n          value: newPlant.type,\n          onChange: value => {\n            if (value) {\n              // Auto-set name to match type when type is selected\n              setNewPlant({\n                ...newPlant,\n                type: value,\n                name: newPlant.name || value // Only update name if it's empty\n              });\n            } else {\n              setNewPlant({\n                ...newPlant,\n                type: ''\n              });\n            }\n          },\n          data: defaultPlantImages.map(img => ({\n            value: img.name,\n            label: img.name\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"Plant Name (optional)\",\n          placeholder: \"Custom name for this plant\",\n          value: newPlant.name,\n          onChange: e => setNewPlant({\n            ...newPlant,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Group, {\n          position: \"right\",\n          mt: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"default\",\n            onClick: () => setShowAddPlant(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleAddPlant,\n            disabled: !newPlant.type,\n            children: \"Add Plant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      opened: showMetrics,\n      onClose: () => setShowMetrics(false),\n      size: \"lg\",\n      title: `Log Daily Metrics - ${selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.name}`,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"sm\",\n        c: \"dimmed\",\n        mb: \"md\",\n        children: [\"Position: (\", selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.x, \", \", selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.y, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(DateInput, {\n              label: \"Date\",\n              value: newMetrics.date,\n              onChange: value => setNewMetrics({\n                ...newMetrics,\n                date: value || new Date()\n              }),\n              valueFormat: \"DD MMM YYYY\",\n              styles: {\n                input: {\n                  height: '36px',\n                  border: '1px solid #E9ECEF',\n                  '&:focus': {\n                    borderColor: 'var(--mantine-color-green-6)'\n                  }\n                },\n                calendarHeaderControl: {\n                  width: '24px',\n                  height: '24px',\n                  minWidth: '24px',\n                  fontSize: '14px',\n                  color: 'var(--mantine-color-green-6)'\n                },\n                day: {\n                  borderRadius: '4px',\n                  height: '34px',\n                  width: '34px',\n                  fontSize: '14px',\n                  '&[data-selected]': {\n                    backgroundColor: 'var(--mantine-color-green-6)'\n                  }\n                }\n              },\n              placeholder: \"Select date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            span: 4,\n            children: /*#__PURE__*/_jsxDEV(TextInput, {\n              type: \"time\",\n              label: \"Time\",\n              value: newMetrics.time,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                time: e.target.value\n              }),\n              styles: {\n                input: {\n                  height: '36px',\n                  border: '1px solid #E9ECEF',\n                  '&:focus': {\n                    borderColor: '#4CAF50'\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(TextInput, {\n              label: \"EC (Electrical Conductivity)\",\n              placeholder: \"e.g., 1.2\",\n              value: newMetrics.ec,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                ec: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(TextInput, {\n              label: \"pH Level\",\n              placeholder: \"e.g., 6.5\",\n              value: newMetrics.ph,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                ph: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            span: 12,\n            children: /*#__PURE__*/_jsxDEV(Textarea, {\n              label: \"Notes\",\n              placeholder: \"Any observations about the plant today...\",\n              value: newMetrics.notes,\n              onChange: e => setNewMetrics({\n                ...newMetrics,\n                notes: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Group, {\n          position: \"right\",\n          mt: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"default\",\n            onClick: () => setShowMetrics(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline\",\n            leftIcon: /*#__PURE__*/_jsxDEV(IconTimeline, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 49\n            }, this),\n            onClick: handleViewMetrics,\n            children: \"View Metrics History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            leftIcon: /*#__PURE__*/_jsxDEV(IconChartLine, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 31\n            }, this),\n            onClick: handleAddMetrics,\n            children: \"Log Metrics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      opened: showMetricsViewer,\n      onClose: () => setShowMetricsViewer(false),\n      size: \"xl\",\n      title: `Metrics History - ${selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.name}`,\n      children: [/*#__PURE__*/_jsxDEV(MetricsViewer, {\n        plantId: selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.id,\n        plantName: selectedPlant === null || selectedPlant === void 0 ? void 0 : selectedPlant.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Group, {\n        position: \"right\",\n        mt: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"default\",\n          onClick: () => setShowMetricsViewer(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setShowMetricsViewer(false);\n            setShowMetrics(true);\n          },\n          leftIcon: /*#__PURE__*/_jsxDEV(IconChartLine, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 23\n          }, this),\n          children: \"Log New Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(GardenCanvas, \"Po4ekglmpwZQxRFzmHB7m3gPIWQ=\");\n_c = GardenCanvas;\nexport default GardenCanvas;\nvar _c;\n$RefreshReg$(_c, \"GardenCanvas\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","useCallback","Box","Paper","Text","Button","Modal","TextInput","Grid","Select","Badge","Alert","Group","Stack","Textarea","DateInput","IconChartLine","IconTimeline","UserContext","MetricsViewer","jsxDEV","_jsxDEV","GardenCanvas","_s","canvasRef","plants","setPlants","loading","setLoading","error","setError","selectedPlant","setSelectedPlant","showAddPlant","setShowAddPlant","showMetrics","setShowMetrics","showMetricsViewer","setShowMetricsViewer","canvasSize","width","height","isDragging","setIsDragging","draggedPlant","setDraggedPlant","dragOffset","setDragOffset","x","y","mouseDownPos","setMouseDownPos","mouseDownPlant","setMouseDownPlant","hasDraggedBeyondThreshold","setHasDraggedBeyondThreshold","DRAG_THRESHOLD","newPlant","setNewPlant","type","name","newMetrics","setNewMetrics","date","Date","time","toTimeString","slice","ec","ph","notes","token","defaultPlantImages","url","fetchPlants","response","fetch","headers","ok","data","json","err","drawCanvas","canvas","current","ctx","getContext","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","forEach","plant","undefined","isBeingDragged","id","isSelected","arc","Math","PI","fill","font","textAlign","fillText","setLineDash","getMousePos","event","rect","getBoundingClientRect","clientX","left","clientY","top","findPlantAtPosition","find","distance","sqrt","updatePlantPosition","plantId","newX","newY","method","body","JSON","stringify","prev","map","handleMouseDown","mousePos","clickedPlant","style","cursor","handleMouseMove","pow","max","min","plantUnderMouse","handleMouseUp","handleCanvasClick","handleAddPlant","toISOString","split","handleAddMetrics","dateStr","timestamp","parseFloat","handleViewMetrics","children","fileName","_jsxFileName","lineNumber","columnNumber","shadow","p","mb","size","fw","c","spacing","variant","color","display","ref","onMouseDown","onMouseMove","onMouseUp","onClick","border","borderRadius","backgroundColor","opened","onClose","title","round","label","placeholder","required","value","onChange","img","e","target","position","mt","disabled","Col","span","valueFormat","styles","input","borderColor","calendarHeaderControl","minWidth","fontSize","day","leftIcon","plantName","_c","$RefreshReg$"],"sources":["/home/filken/dev/horti_clj/horti-ui/src/components/GardenCanvas.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  Text,\n  Button,\n  Modal,\n  TextInput,\n  Grid,\n  Select,\n  Badge,\n  Alert,\n  Group,\n  Stack,\n  Textarea,\n} from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport { IconChartLine, IconTimeline } from '@tabler/icons-react';\nimport { UserContext } from '../contexts/UserContext';\nimport MetricsViewer from './MetricsViewer';\n\nconst GardenCanvas = () => {\n  const canvasRef = useRef(null);\n  const [plants, setPlants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlant, setSelectedPlant] = useState(null);\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showMetrics, setShowMetrics] = useState(false);\n  const [showMetricsViewer, setShowMetricsViewer] = useState(false);\n  const [canvasSize] = useState({ width: 800, height: 600 });\n  \n  // Enhanced drag state with threshold detection\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedPlant, setDraggedPlant] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [mouseDownPos, setMouseDownPos] = useState({ x: 0, y: 0 });\n  const [mouseDownPlant, setMouseDownPlant] = useState(null);\n  const [hasDraggedBeyondThreshold, setHasDraggedBeyondThreshold] = useState(false);\n  \n  const DRAG_THRESHOLD = 5; // pixels\n\n  const [newPlant, setNewPlant] = useState({\n    type: '',\n    name: '',\n    x: 0,\n    y: 0\n  });\n\n  const [newMetrics, setNewMetrics] = useState({\n    date: new Date(),\n    time: new Date().toTimeString().slice(0, 5), // HH:MM format\n    ec: '',\n    ph: '',\n    notes: ''\n  });\n\n  const { token } = useContext(UserContext);\n\n  const defaultPlantImages = [\n    { name: 'Tomato', url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🍅' },\n    { name: 'Lettuce', url: 'https://via.placeholder.com/50x50/66bb6a/ffffff?text=🥬' },\n    { name: 'Basil', url: 'https://via.placeholder.com/50x50/8bc34a/ffffff?text=🌿' },\n    { name: 'Pepper', url: 'https://via.placeholder.com/50x50/ff7043/ffffff?text=🌶️' },\n    { name: 'Spinach', url: 'https://via.placeholder.com/50x50/4caf50/ffffff?text=🥬' },\n  ];\n\n  const fetchPlants = useCallback(async () => {\n    try {\n      const response = await fetch('/api/plants', {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setPlants(data);\n      } else {\n        setError('Failed to fetch plants');\n      }\n    } catch (err) {\n      setError('Error connecting to server');\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (token) {\n      fetchPlants();\n    }\n  }, [token, fetchPlants]);\n\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.fillStyle = '#f1f8e9';\n    ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n    \n    // Draw grid\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= canvasSize.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvasSize.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= canvasSize.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvasSize.width, y);\n      ctx.stroke();\n    }\n\n    // Draw plants\n    plants.forEach(plant => {\n      if (plant.x !== undefined && plant.y !== undefined) {\n        // Highlight dragged plant\n        const isBeingDragged = draggedPlant?.id === plant.id;\n        const isSelected = selectedPlant?.id === plant.id;\n        \n        // Draw plant circle with different colors for different states\n        if (isBeingDragged) {\n          ctx.fillStyle = '#2196f3'; // Blue when dragging\n        } else if (isSelected) {\n          ctx.fillStyle = '#ff9800'; // Orange when selected\n        } else {\n          ctx.fillStyle = '#4caf50'; // Green normally\n        }\n        \n        ctx.beginPath();\n        ctx.arc(plant.x, plant.y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        \n        // Draw plant name\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(plant.name, plant.x, plant.y + 4);\n        \n        // Draw drag indicator for dragged plant\n        if (isBeingDragged) {\n          ctx.strokeStyle = '#1976d2';\n          ctx.lineWidth = 2;\n          ctx.setLineDash([5, 5]);\n          ctx.beginPath();\n          ctx.arc(plant.x, plant.y, 30, 0, 2 * Math.PI);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n    });\n  }, [plants, selectedPlant, draggedPlant, canvasSize.width, canvasSize.height]);\n\n  useEffect(() => {\n    if (!loading) {\n      drawCanvas();\n    }\n  }, [loading, drawCanvas]);\n\n  const getMousePos = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  };\n\n  const findPlantAtPosition = (x, y) => {\n    return plants.find(plant => {\n      const distance = Math.sqrt((x - plant.x) ** 2 + (y - plant.y) ** 2);\n      return distance <= 25;\n    });\n  };\n\n  const updatePlantPosition = async (plantId, newX, newY) => {\n    try {\n      const response = await fetch(`/api/plants/${plantId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ x: newX, y: newY }),\n      });\n\n      if (response.ok) {\n        // Update local state\n        setPlants(prev => prev.map(plant => \n          plant.id === plantId \n            ? { ...plant, x: newX, y: newY }\n            : plant\n        ));\n      } else {\n        setError('Failed to update plant position');\n        // Revert to original position by refetching\n        fetchPlants();\n      }\n    } catch (err) {\n      setError('Error updating plant position');\n      fetchPlants();\n    }\n  };\n\n  const handleMouseDown = (event) => {\n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n\n    if (clickedPlant) {\n      // Track initial mouse position and clicked plant for potential drag\n      setMouseDownPos(mousePos);\n      setMouseDownPlant(clickedPlant);\n      setDragOffset({\n        x: mousePos.x - clickedPlant.x,\n        y: mousePos.y - clickedPlant.y\n      });\n      \n      // Change cursor to indicate potential drag\n      const canvas = canvasRef.current;\n      canvas.style.cursor = 'grabbing';\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n\n    if (mouseDownPlant && !isDragging) {\n      // Check if we've moved beyond the drag threshold\n      const distance = Math.sqrt(\n        Math.pow(mousePos.x - mouseDownPos.x, 2) + \n        Math.pow(mousePos.y - mouseDownPos.y, 2)\n      );\n      \n      if (distance > DRAG_THRESHOLD) {\n        // Start actual dragging\n        setIsDragging(true);\n        setDraggedPlant(mouseDownPlant);\n        setHasDraggedBeyondThreshold(true);\n      }\n    }\n\n    if (isDragging && draggedPlant) {\n      // Update plant position in real-time during drag\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      \n      // Update local state for immediate visual feedback\n      setPlants(prev => prev.map(plant => \n        plant.id === draggedPlant.id \n          ? { ...plant, x: newX, y: newY }\n          : plant\n      ));\n    } else if (!mouseDownPlant) {\n      // Update cursor based on what's under the mouse\n      const plantUnderMouse = findPlantAtPosition(mousePos.x, mousePos.y);\n      canvas.style.cursor = plantUnderMouse ? 'grab' : 'crosshair';\n    }\n  };\n\n  const handleMouseUp = async (event) => {\n    const mousePos = getMousePos(event);\n    const canvas = canvasRef.current;\n    \n    if (isDragging && draggedPlant) {\n      // Handle end of drag - save position to backend\n      const newX = Math.max(25, Math.min(canvasSize.width - 25, mousePos.x - dragOffset.x));\n      const newY = Math.max(25, Math.min(canvasSize.height - 25, mousePos.y - dragOffset.y));\n      \n      await updatePlantPosition(draggedPlant.id, newX, newY);\n    } else if (mouseDownPlant && !hasDraggedBeyondThreshold) {\n      // This was a click, not a drag - open metrics dialog\n      setSelectedPlant(mouseDownPlant);\n      setShowMetrics(true);\n    }\n    \n    // Reset all drag-related state\n    setIsDragging(false);\n    setDraggedPlant(null);\n    setMouseDownPlant(null);\n    setHasDraggedBeyondThreshold(false);\n    setDragOffset({ x: 0, y: 0 });\n    setMouseDownPos({ x: 0, y: 0 });\n    \n    canvas.style.cursor = 'crosshair';\n  };\n\n  const handleCanvasClick = (event) => {\n    // Only handle clicks for adding new plants in empty space\n    // Plant clicks are now handled in handleMouseUp\n    if (isDragging || mouseDownPlant) return;\n    \n    const mousePos = getMousePos(event);\n    const clickedPlant = findPlantAtPosition(mousePos.x, mousePos.y);\n\n    if (!clickedPlant) {\n      // Add new plant at clicked position (empty space)\n      setNewPlant(prev => ({ ...prev, x: mousePos.x, y: mousePos.y }));\n      setShowAddPlant(true);\n    }\n  };\n\n  const handleAddPlant = async () => {\n    if (!newPlant.type) return; // Require plant type\n    \n    try {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          name: newPlant.name || newPlant.type, // Use name if provided, otherwise use type\n          type: newPlant.type,\n          x: newPlant.x,\n          y: newPlant.y,\n          'planting-date': new Date().toISOString().split('T')[0]\n        }),\n      });\n\n      if (response.ok) {\n        setShowAddPlant(false);\n        setNewPlant({ type: '', name: '', x: 0, y: 0 });\n        fetchPlants();\n      } else {\n        setError('Failed to add plant');\n      }\n    } catch (err) {\n      setError('Error adding plant');\n    }\n  };\n\n  const handleAddMetrics = async () => {\n    if (!selectedPlant) return;\n\n    try {\n      // Combine date and time into a single timestamp\n      const dateStr = newMetrics.date.toISOString().split('T')[0];\n      const timestamp = new Date(`${dateStr}T${newMetrics.time}:00`).toISOString();\n      \n      const response = await fetch(`/api/plants/${selectedPlant.id}/metrics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          'plant-id': selectedPlant.id,\n          date: timestamp,\n          ec: parseFloat(newMetrics.ec) || null,\n          ph: parseFloat(newMetrics.ph) || null,\n          notes: newMetrics.notes\n        }),\n      });\n\n      if (response.ok) {\n        setShowMetrics(false);\n        setNewMetrics({\n          date: new Date(),\n          time: new Date().toTimeString().slice(0, 5),\n          ec: '', ph: '', notes: ''\n        });\n        setSelectedPlant(null);\n      } else {\n        setError('Failed to add metrics');\n      }\n    } catch (err) {\n      setError('Error adding metrics');\n    }\n  };\n\n  const handleViewMetrics = () => {\n    setShowMetrics(false);\n    setShowMetricsViewer(true);\n  };\n\n  if (loading) return <Text>Loading garden...</Text>;\n\n  return (\n    <Box>\n      <Paper shadow=\"md\" p=\"md\" mb=\"xl\">\n        <Text size=\"xl\" fw={700} c=\"teal\">\n          🌱 Interactive Garden Canvas\n        </Text>\n        <Text c=\"dimmed\" mb=\"md\">\n          Click anywhere to add a plant, drag plants to move them, or click on existing plants to log daily metrics\n        </Text>\n        <Group spacing=\"xs\">\n          <Badge variant=\"outline\" color=\"teal\" size=\"sm\">💡 Click empty space to add plants</Badge>\n          <Badge variant=\"outline\" color=\"teal\" size=\"sm\">🖱️ Drag plants to move them around</Badge>\n          <Badge variant=\"outline\" color=\"teal\" size=\"sm\">📊 Click plants to log EC & pH</Badge>\n        </Group>\n      </Paper>\n\n      {error && (\n        <Alert color=\"red\" mb=\"xl\">\n          {error}\n        </Alert>\n      )}\n\n      <Paper shadow=\"md\" p=\"md\" style={{ display: 'inline-block' }}>\n        <canvas\n          ref={canvasRef}\n          width={canvasSize.width}\n          height={canvasSize.height}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onClick={handleCanvasClick}\n          style={{\n            border: '2px solid #20c997',\n            borderRadius: '8px',\n            cursor: 'crosshair',\n            backgroundColor: '#f1f8e9'\n          }}\n        />\n      </Paper>\n\n      {/* Add Plant Dialog */}\n      <Modal opened={showAddPlant} onClose={() => setShowAddPlant(false)} title={`Add Plant at (${Math.round(newPlant.x)}, ${Math.round(newPlant.y)})`}>\n        <Stack spacing=\"md\">\n          <Select\n            label=\"Plant Type\"\n            placeholder=\"Select plant type\"\n            required\n            value={newPlant.type}\n            onChange={(value) => {\n              if (value) {\n                // Auto-set name to match type when type is selected\n                setNewPlant({ \n                  ...newPlant, \n                  type: value, \n                  name: newPlant.name || value // Only update name if it's empty\n                });\n              } else {\n                setNewPlant({ ...newPlant, type: '' });\n              }\n            }}\n            data={defaultPlantImages.map((img) => ({\n              value: img.name,\n              label: img.name\n            }))}\n          />\n          <TextInput\n            label=\"Plant Name (optional)\"\n            placeholder=\"Custom name for this plant\"\n            value={newPlant.name}\n            onChange={(e) => setNewPlant({ ...newPlant, name: e.target.value })}\n          />\n          <Group position=\"right\" mt=\"md\">\n            <Button variant=\"default\" onClick={() => setShowAddPlant(false)}>Cancel</Button>\n            <Button onClick={handleAddPlant} disabled={!newPlant.type}>Add Plant</Button>\n          </Group>\n        </Stack>\n      </Modal>\n\n      {/* Daily Metrics Dialog */}\n      <Modal opened={showMetrics} onClose={() => setShowMetrics(false)} size=\"lg\" title={`Log Daily Metrics - ${selectedPlant?.name}`}>\n        <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\n          Position: ({selectedPlant?.x}, {selectedPlant?.y})\n        </Text>\n        <Stack spacing=\"md\">\n          <Grid>\n            <Grid.Col span={8}>\n              <DateInput\n                label=\"Date\"\n                value={newMetrics.date}\n                onChange={(value) => setNewMetrics({ ...newMetrics, date: value || new Date() })}\n                valueFormat=\"DD MMM YYYY\"\n                styles={{\n                  input: {\n                    height: '36px',\n                    border: '1px solid #E9ECEF',\n                    '&:focus': {\n                      borderColor: 'var(--mantine-color-green-6)',\n                    }\n                  },\n                  calendarHeaderControl: { \n                    width: '24px',\n                    height: '24px',\n                    minWidth: '24px',\n                    fontSize: '14px',\n                    color: 'var(--mantine-color-green-6)',\n                  },\n                  day: { \n                    borderRadius: '4px',\n                    height: '34px',\n                    width: '34px',\n                    fontSize: '14px',\n                    '&[data-selected]': {\n                      backgroundColor: 'var(--mantine-color-green-6)',\n                    }\n                  }\n                }}\n                placeholder=\"Select date\"\n              />\n            </Grid.Col>\n            <Grid.Col span={4}>\n              <TextInput\n                type=\"time\"\n                label=\"Time\"\n                value={newMetrics.time}\n                onChange={(e) => setNewMetrics({ ...newMetrics, time: e.target.value })}\n                styles={{\n                  input: {\n                    height: '36px',\n                    border: '1px solid #E9ECEF',\n                    '&:focus': {\n                      borderColor: '#4CAF50',\n                    }\n                  }\n                }}\n              />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <TextInput\n                label=\"EC (Electrical Conductivity)\"\n                placeholder=\"e.g., 1.2\"\n                value={newMetrics.ec}\n                onChange={(e) => setNewMetrics({ ...newMetrics, ec: e.target.value })}\n              />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <TextInput\n                label=\"pH Level\"\n                placeholder=\"e.g., 6.5\"\n                value={newMetrics.ph}\n                onChange={(e) => setNewMetrics({ ...newMetrics, ph: e.target.value })}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <Textarea\n                label=\"Notes\"\n                placeholder=\"Any observations about the plant today...\"\n                value={newMetrics.notes}\n                onChange={(e) => setNewMetrics({ ...newMetrics, notes: e.target.value })}\n              />\n            </Grid.Col>\n          </Grid>\n          <Group position=\"right\" mt=\"md\">\n            <Button variant=\"default\" onClick={() => setShowMetrics(false)}>Cancel</Button>\n            <Button variant=\"outline\" leftIcon={<IconTimeline />} onClick={handleViewMetrics}>\n              View Metrics History\n            </Button>\n            <Button leftIcon={<IconChartLine />} onClick={handleAddMetrics}>\n              Log Metrics\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n\n      {/* Metrics Viewer Dialog */}\n      <Modal opened={showMetricsViewer} onClose={() => setShowMetricsViewer(false)} size=\"xl\" title={`Metrics History - ${selectedPlant?.name}`}>\n        <MetricsViewer \n          plantId={selectedPlant?.id} \n          plantName={selectedPlant?.name} \n        />\n        <Group position=\"right\" mt=\"md\">\n          <Button variant=\"default\" onClick={() => setShowMetricsViewer(false)}>Close</Button>\n          <Button \n            onClick={() => {\n              setShowMetricsViewer(false);\n              setShowMetrics(true);\n            }} \n            leftIcon={<IconChartLine />}\n          >\n            Log New Metrics\n          </Button>\n        </Group>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default GardenCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}