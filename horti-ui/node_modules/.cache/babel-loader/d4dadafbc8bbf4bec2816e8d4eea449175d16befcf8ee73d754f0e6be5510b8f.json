{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useRef, useState } from 'react';\nimport { createVarsResolver, getFontSize, factory, useProps, useResolvedStylesApi, useStyles, Popover, InputBase, CloseButton } from '@mantine/core';\nimport { useMergedRef, useId } from '@mantine/hooks';\nimport { SpinInput } from '../SpinInput/SpinInput.mjs';\nimport { AmPmInput } from './AmPmInput/AmPmInput.mjs';\nimport { AmPmControlsList } from './TimeControlsList/AmPmControlsList.mjs';\nimport { TimeControlsList } from './TimeControlsList/TimeControlsList.mjs';\nimport { TimePickerProvider } from './TimePicker.context.mjs';\nimport { TimePresets } from './TimePresets/TimePresets.mjs';\nimport { useTimePicker } from './use-time-picker.mjs';\nimport { getParsedTime } from './utils/get-parsed-time/get-parsed-time.mjs';\nimport classes from './TimePicker.module.css.mjs';\nconst defaultProps = {\n  hoursStep: 1,\n  minutesStep: 1,\n  secondsStep: 1,\n  format: \"24h\",\n  amPmLabels: {\n    am: \"AM\",\n    pm: \"PM\"\n  },\n  withDropdown: false,\n  pasteSplit: getParsedTime,\n  maxDropdownContentHeight: 200\n};\nconst varsResolver = createVarsResolver((_theme, {\n  size\n}) => ({\n  dropdown: {\n    \"--control-font-size\": getFontSize(size)\n  }\n}));\nconst TimePicker = factory((_props, ref) => {\n  const props = useProps(\"TimePicker\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onClick,\n    format,\n    value,\n    defaultValue,\n    onChange,\n    hoursStep,\n    minutesStep,\n    secondsStep,\n    withSeconds,\n    hoursInputLabel,\n    minutesInputLabel,\n    secondsInputLabel,\n    amPmInputLabel,\n    amPmLabels,\n    clearable,\n    onMouseDown,\n    onFocusCapture,\n    onBlurCapture,\n    min,\n    max,\n    popoverProps,\n    withDropdown,\n    rightSection,\n    onFocus,\n    onBlur,\n    clearButtonProps,\n    hoursInputProps,\n    minutesInputProps,\n    secondsInputProps,\n    amPmSelectProps,\n    readOnly,\n    disabled,\n    size,\n    name,\n    form,\n    hiddenInputProps,\n    labelProps,\n    pasteSplit,\n    hoursRef,\n    minutesRef,\n    secondsRef,\n    amPmRef,\n    presets,\n    maxDropdownContentHeight,\n    scrollAreaProps,\n    ...others\n  } = props;\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const getStyles = useStyles({\n    name: \"TimePicker\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const controller = useTimePicker({\n    value,\n    defaultValue,\n    onChange,\n    format,\n    amPmLabels,\n    withSeconds,\n    min,\n    max,\n    clearable,\n    disabled,\n    readOnly,\n    pasteSplit\n  });\n  const _hoursRef = useMergedRef(controller.refs.hours, hoursRef);\n  const _minutesRef = useMergedRef(controller.refs.minutes, minutesRef);\n  const _secondsRef = useMergedRef(controller.refs.seconds, secondsRef);\n  const _amPmRef = useMergedRef(controller.refs.amPm, amPmRef);\n  const hoursInputId = useId();\n  const hasFocusRef = useRef(false);\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n  const handleFocus = event => {\n    if (!hasFocusRef.current) {\n      hasFocusRef.current = true;\n      onFocus?.(event);\n    }\n  };\n  const handleBlur = event => {\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      hasFocusRef.current = false;\n      onBlur?.(event);\n    }\n  };\n  return /* @__PURE__ */jsx(TimePickerProvider, {\n    value: {\n      getStyles,\n      scrollAreaProps,\n      maxDropdownContentHeight\n    },\n    children: /* @__PURE__ */jsxs(Popover, {\n      opened: withDropdown && !readOnly && dropdownOpened,\n      transitionProps: {\n        duration: 0\n      },\n      position: \"bottom-start\",\n      withRoles: false,\n      ...popoverProps,\n      children: [/* @__PURE__ */jsx(Popover.Target, {\n        children: /* @__PURE__ */jsxs(InputBase, {\n          component: \"div\",\n          size,\n          disabled,\n          ref,\n          onClick: event => {\n            onClick?.(event);\n            controller.focus(\"hours\");\n          },\n          onMouseDown: event => {\n            event.preventDefault();\n            onMouseDown?.(event);\n          },\n          onFocusCapture: event => {\n            setDropdownOpened(true);\n            onFocusCapture?.(event);\n          },\n          onBlurCapture: event => {\n            setDropdownOpened(false);\n            onBlurCapture?.(event);\n          },\n          rightSection: rightSection || controller.isClearable && /* @__PURE__ */jsx(CloseButton, {\n            ...clearButtonProps,\n            size,\n            onClick: event => {\n              controller.clear();\n              clearButtonProps?.onClick?.(event);\n            },\n            onMouseDown: event => {\n              event.preventDefault();\n              clearButtonProps?.onMouseDown?.(event);\n            }\n          }),\n          labelProps: {\n            htmlFor: hoursInputId,\n            ...labelProps\n          },\n          style,\n          className,\n          classNames: resolvedClassNames,\n          styles: resolvedStyles,\n          __staticSelector: \"TimePicker\",\n          ...others,\n          children: [/* @__PURE__ */jsx(\"div\", {\n            ...getStyles(\"fieldsRoot\"),\n            dir: \"ltr\",\n            children: /* @__PURE__ */jsxs(\"div\", {\n              ...getStyles(\"fieldsGroup\"),\n              onBlur: handleBlur,\n              children: [/* @__PURE__ */jsx(SpinInput, {\n                id: hoursInputId,\n                ...hoursInputProps,\n                ...getStyles(\"field\", {\n                  className: hoursInputProps?.className,\n                  style: hoursInputProps?.style\n                }),\n                value: controller.values.hours,\n                onChange: controller.setHours,\n                onNextInput: () => controller.focus(\"minutes\"),\n                min: format === \"12h\" ? 1 : 0,\n                max: format === \"12h\" ? 12 : 23,\n                focusable: true,\n                step: hoursStep,\n                ref: _hoursRef,\n                \"aria-label\": hoursInputLabel,\n                readOnly,\n                disabled,\n                onPaste: controller.onPaste,\n                onFocus: event => {\n                  handleFocus(event);\n                  hoursInputProps?.onFocus?.(event);\n                }\n              }), /* @__PURE__ */jsx(\"span\", {\n                children: \":\"\n              }), /* @__PURE__ */jsx(SpinInput, {\n                ...minutesInputProps,\n                ...getStyles(\"field\", {\n                  className: minutesInputProps?.className,\n                  style: minutesInputProps?.style\n                }),\n                value: controller.values.minutes,\n                onChange: controller.setMinutes,\n                min: 0,\n                max: 59,\n                focusable: true,\n                step: minutesStep,\n                ref: _minutesRef,\n                onPreviousInput: () => controller.focus(\"hours\"),\n                onNextInput: () => withSeconds ? controller.focus(\"seconds\") : controller.focus(\"amPm\"),\n                \"aria-label\": minutesInputLabel,\n                tabIndex: -1,\n                readOnly,\n                disabled,\n                onPaste: controller.onPaste,\n                onFocus: event => {\n                  handleFocus(event);\n                  minutesInputProps?.onFocus?.(event);\n                }\n              }), withSeconds && /* @__PURE__ */jsxs(Fragment, {\n                children: [/* @__PURE__ */jsx(\"span\", {\n                  children: \":\"\n                }), /* @__PURE__ */jsx(SpinInput, {\n                  ...secondsInputProps,\n                  ...getStyles(\"field\", {\n                    className: secondsInputProps?.className,\n                    style: secondsInputProps?.style\n                  }),\n                  value: controller.values.seconds,\n                  onChange: controller.setSeconds,\n                  min: 0,\n                  max: 59,\n                  focusable: true,\n                  step: secondsStep,\n                  ref: _secondsRef,\n                  onPreviousInput: () => controller.focus(\"minutes\"),\n                  onNextInput: () => controller.focus(\"amPm\"),\n                  \"aria-label\": secondsInputLabel,\n                  tabIndex: -1,\n                  readOnly,\n                  disabled,\n                  onPaste: controller.onPaste,\n                  onFocus: event => {\n                    handleFocus(event);\n                    secondsInputProps?.onFocus?.(event);\n                  }\n                })]\n              }), format === \"12h\" && /* @__PURE__ */jsx(AmPmInput, {\n                ...amPmSelectProps,\n                inputType: withDropdown ? \"input\" : \"select\",\n                labels: amPmLabels,\n                value: controller.values.amPm,\n                onChange: controller.setAmPm,\n                ref: _amPmRef,\n                \"aria-label\": amPmInputLabel,\n                onPreviousInput: () => withSeconds ? controller.focus(\"seconds\") : controller.focus(\"minutes\"),\n                readOnly,\n                disabled,\n                tabIndex: -1,\n                onPaste: controller.onPaste,\n                onFocus: event => {\n                  handleFocus(event);\n                  amPmSelectProps?.onFocus?.(event);\n                }\n              })]\n            })\n          }), /* @__PURE__ */jsx(\"input\", {\n            type: \"hidden\",\n            name,\n            form,\n            value: controller.hiddenInputValue,\n            ...hiddenInputProps\n          })]\n        })\n      }), /* @__PURE__ */jsx(Popover.Dropdown, {\n        ...getStyles(\"dropdown\"),\n        onMouseDown: event => event.preventDefault(),\n        children: presets ? /* @__PURE__ */jsx(TimePresets, {\n          value: controller.hiddenInputValue,\n          onChange: controller.setTimeString,\n          format,\n          presets,\n          amPmLabels,\n          withSeconds: withSeconds || false\n        }) : /* @__PURE__ */jsxs(\"div\", {\n          ...getStyles(\"controlsListGroup\"),\n          children: [/* @__PURE__ */jsx(TimeControlsList, {\n            min: format === \"12h\" ? 1 : 0,\n            max: format === \"12h\" ? 12 : 23,\n            step: hoursStep,\n            value: controller.values.hours,\n            onSelect: controller.setHours\n          }), /* @__PURE__ */jsx(TimeControlsList, {\n            min: 0,\n            max: 59,\n            step: minutesStep,\n            value: controller.values.minutes,\n            onSelect: controller.setMinutes\n          }), withSeconds && /* @__PURE__ */jsx(TimeControlsList, {\n            min: 0,\n            max: 59,\n            step: secondsStep,\n            value: controller.values.seconds,\n            onSelect: controller.setSeconds\n          }), format === \"12h\" && /* @__PURE__ */jsx(AmPmControlsList, {\n            labels: amPmLabels,\n            value: controller.values.amPm,\n            onSelect: controller.setAmPm\n          })]\n        })\n      })]\n    })\n  });\n});\nTimePicker.displayName = \"@mantine/dates/TimePicker\";\nTimePicker.classes = classes;\nexport { TimePicker };","map":{"version":3,"names":["defaultProps","hoursStep","minutesStep","secondsStep","format","amPmLabels","am","pm","withDropdown","pasteSplit","getParsedTime","maxDropdownContentHeight","varsResolver","createVarsResolver","_theme","size","dropdown","getFontSize","TimePicker","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","onClick","value","defaultValue","onChange","withSeconds","hoursInputLabel","minutesInputLabel","secondsInputLabel","amPmInputLabel","clearable","onMouseDown","onFocusCapture","onBlurCapture","min","max","popoverProps","rightSection","onFocus","onBlur","clearButtonProps","hoursInputProps","minutesInputProps","secondsInputProps","amPmSelectProps","readOnly","disabled","name","form","hiddenInputProps","labelProps","hoursRef","minutesRef","secondsRef","amPmRef","presets","scrollAreaProps","others","resolvedClassNames","resolvedStyles","useResolvedStylesApi","getStyles","useStyles","classes","controller","useTimePicker","_hoursRef","useMergedRef","refs","hours","_minutesRef","minutes","_secondsRef","seconds","_amPmRef","amPm","hoursInputId","useId","hasFocusRef","useRef","dropdownOpened","setDropdownOpened","useState","handleFocus","event","current","handleBlur","currentTarget","contains","relatedTarget","jsx","TimePickerProvider","children","jsxs","Popover","opened","transitionProps","duration","position","withRoles","Target","InputBase","component","focus","preventDefault","isClearable","CloseButton","clear","htmlFor","__staticSelector","dir","SpinInput","id","values","setHours","onNextInput","focusable","step","onPaste","setMinutes","onPreviousInput","tabIndex","Fragment","setSeconds","AmPmInput","inputType","labels","setAmPm","type","hiddenInputValue","Dropdown","TimePresets","setTimeString","TimeControlsList","onSelect","AmPmControlsList","displayName"],"sources":["/home/filken/dev/horti_clj/horti-ui/node_modules/@mantine/dates/src/components/TimePicker/TimePicker.tsx"],"sourcesContent":["import { useRef, useState } from 'react';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  CloseButton,\n  CloseButtonProps,\n  createVarsResolver,\n  DataAttributes,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  InputBase,\n  InputVariant,\n  Popover,\n  PopoverProps,\n  ScrollAreaProps,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { useId, useMergedRef } from '@mantine/hooks';\nimport { SpinInput } from '../SpinInput';\nimport { AmPmInput } from './AmPmInput/AmPmInput';\nimport { AmPmControlsList } from './TimeControlsList/AmPmControlsList';\nimport { TimeControlsList } from './TimeControlsList/TimeControlsList';\nimport { TimePickerProvider } from './TimePicker.context';\nimport {\n  TimePickerAmPmLabels,\n  TimePickerFormat,\n  TimePickerPasteSplit,\n  TimePickerPresets,\n} from './TimePicker.types';\nimport { TimePresets } from './TimePresets/TimePresets';\nimport { useTimePicker } from './use-time-picker';\nimport { getParsedTime } from './utils/get-parsed-time/get-parsed-time';\nimport classes from './TimePicker.module.css';\n\nexport type TimePickerStylesNames =\n  | 'fieldsRoot'\n  | 'fieldsGroup'\n  | 'field'\n  | 'controlsList'\n  | 'controlsListGroup'\n  | 'control'\n  | 'dropdown'\n  | 'presetsRoot'\n  | 'presetsGroup'\n  | 'presetsGroupLabel'\n  | 'presetControl'\n  | 'scrollarea'\n  | __InputStylesNames;\n\nexport type TimePickerCssVariables = {\n  dropdown: '--control-font-size';\n};\n\nexport interface TimePickerProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<TimePickerFactory>,\n    ElementProps<'div', 'onChange' | 'defaultValue'> {\n  /** Controlled component value */\n  value?: string;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string;\n\n  /** Called when the value changes */\n  onChange?: (value: string) => void;\n\n  /** Determines whether the clear button should be displayed, `false` by default */\n  clearable?: boolean;\n\n  /** `name` prop passed down to the hidden input */\n  name?: string;\n\n  /** `form` prop passed down to the hidden input */\n  form?: string;\n\n  /** Min possible time value in `hh:mm:ss` format */\n  min?: string;\n\n  /** Max possible time value in `hh:mm:ss` format */\n  max?: string;\n\n  /** Time format, `'24h'` by default */\n  format?: TimePickerFormat;\n\n  /** Number by which hours are incremented/decremented, `1` by default */\n  hoursStep?: number;\n\n  /** Number by which minutes are incremented/decremented, `1` by default */\n  minutesStep?: number;\n\n  /** Number by which seconds are incremented/decremented, `1` by default */\n  secondsStep?: number;\n\n  /** Determines whether the seconds input should be displayed, `false` by default */\n  withSeconds?: boolean;\n\n  /** `aria-label` of hours input */\n  hoursInputLabel?: string;\n\n  /** `aria-label` of minutes input */\n  minutesInputLabel?: string;\n\n  /** `aria-label` of seconds input */\n  secondsInputLabel?: string;\n\n  /** `aria-label` of am/pm input */\n  amPmInputLabel?: string;\n\n  /** Labels used for am/pm values, `{ am: 'AM', pm: 'PM' }` by default */\n  amPmLabels?: TimePickerAmPmLabels;\n\n  /** Determines whether the dropdown with time controls list should be visible when the input has focus, `false` by default */\n  withDropdown?: boolean;\n\n  /** Props passed down to `Popover` component */\n  popoverProps?: PopoverProps;\n\n  /** Called once when one of the inputs is focused, not called when focused is shifted between hours, minutes, seconds and am/pm inputs */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n\n  /** Called once when the focus is no longer on any of the inputs */\n  onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;\n\n  /** Props passed down to clear button */\n  clearButtonProps?: CloseButtonProps & ElementProps<'button'> & DataAttributes;\n\n  /** Props passed down to hours input */\n  hoursInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to minutes input */\n  minutesInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to seconds input */\n  secondsInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to am/pm select */\n  amPmSelectProps?: React.ComponentPropsWithoutRef<'select'> & DataAttributes;\n\n  /** If set, the value cannot be updated */\n  readOnly?: boolean;\n\n  /** If set, the component becomes disabled */\n  disabled?: boolean;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** A function to transform paste values, by default time in 24h format can be parsed on paste for example `23:34:22` */\n  pasteSplit?: TimePickerPasteSplit;\n\n  /** A ref object to get node reference of the hours input */\n  hoursRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the minutes input */\n  minutesRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the seconds input */\n  secondsRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the am/pm select */\n  amPmRef?: React.Ref<HTMLSelectElement>;\n\n  /** Time presets to display in the dropdown */\n  presets?: TimePickerPresets;\n\n  /** Maximum height of the content displayed in the dropdown in px, `200` by default */\n  maxDropdownContentHeight?: number;\n\n  /** Props passed down to all underlying `ScrollArea` components */\n  scrollAreaProps?: ScrollAreaProps;\n}\n\nexport type TimePickerFactory = Factory<{\n  props: TimePickerProps;\n  ref: HTMLDivElement;\n  stylesNames: TimePickerStylesNames;\n  vars: TimePickerCssVariables;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<TimePickerProps> = {\n  hoursStep: 1,\n  minutesStep: 1,\n  secondsStep: 1,\n  format: '24h',\n  amPmLabels: { am: 'AM', pm: 'PM' },\n  withDropdown: false,\n  pasteSplit: getParsedTime,\n  maxDropdownContentHeight: 200,\n};\n\nconst varsResolver = createVarsResolver<TimePickerFactory>((_theme, { size }) => ({\n  dropdown: {\n    '--control-font-size': getFontSize(size),\n  },\n}));\n\nexport const TimePicker = factory<TimePickerFactory>((_props, ref) => {\n  const props = useProps('TimePicker', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onClick,\n    format,\n    value,\n    defaultValue,\n    onChange,\n    hoursStep,\n    minutesStep,\n    secondsStep,\n    withSeconds,\n    hoursInputLabel,\n    minutesInputLabel,\n    secondsInputLabel,\n    amPmInputLabel,\n    amPmLabels,\n    clearable,\n    onMouseDown,\n    onFocusCapture,\n    onBlurCapture,\n    min,\n    max,\n    popoverProps,\n    withDropdown,\n    rightSection,\n    onFocus,\n    onBlur,\n    clearButtonProps,\n    hoursInputProps,\n    minutesInputProps,\n    secondsInputProps,\n    amPmSelectProps,\n    readOnly,\n    disabled,\n    size,\n    name,\n    form,\n    hiddenInputProps,\n    labelProps,\n    pasteSplit,\n    hoursRef,\n    minutesRef,\n    secondsRef,\n    amPmRef,\n    presets,\n    maxDropdownContentHeight,\n    scrollAreaProps,\n    ...others\n  } = props;\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<TimePickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<TimePickerFactory>({\n    name: 'TimePicker',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const controller = useTimePicker({\n    value,\n    defaultValue,\n    onChange,\n    format: format!,\n    amPmLabels: amPmLabels!,\n    withSeconds,\n    min,\n    max,\n    clearable,\n    disabled,\n    readOnly,\n    pasteSplit,\n  });\n\n  const _hoursRef = useMergedRef(controller.refs.hours, hoursRef);\n  const _minutesRef = useMergedRef(controller.refs.minutes, minutesRef);\n  const _secondsRef = useMergedRef(controller.refs.seconds, secondsRef);\n  const _amPmRef = useMergedRef(controller.refs.amPm, amPmRef);\n\n  const hoursInputId = useId();\n  const hasFocusRef = useRef(false);\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n\n  const handleFocus = (event: React.FocusEvent<any>) => {\n    if (!hasFocusRef.current) {\n      hasFocusRef.current = true;\n      onFocus?.(event);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      hasFocusRef.current = false;\n      onBlur?.(event);\n    }\n  };\n\n  return (\n    <TimePickerProvider\n      value={{ getStyles, scrollAreaProps, maxDropdownContentHeight: maxDropdownContentHeight! }}\n    >\n      <Popover\n        opened={withDropdown && !readOnly && dropdownOpened}\n        transitionProps={{ duration: 0 }}\n        position=\"bottom-start\"\n        withRoles={false}\n        {...popoverProps}\n      >\n        <Popover.Target>\n          <InputBase\n            component=\"div\"\n            size={size}\n            disabled={disabled}\n            ref={ref}\n            onClick={(event) => {\n              onClick?.(event);\n              controller.focus('hours');\n            }}\n            onMouseDown={(event) => {\n              event.preventDefault();\n              onMouseDown?.(event);\n            }}\n            onFocusCapture={(event) => {\n              setDropdownOpened(true);\n              onFocusCapture?.(event);\n            }}\n            onBlurCapture={(event) => {\n              setDropdownOpened(false);\n              onBlurCapture?.(event);\n            }}\n            rightSection={\n              rightSection ||\n              (controller.isClearable && (\n                <CloseButton\n                  {...clearButtonProps}\n                  size={size}\n                  onClick={(event) => {\n                    controller.clear();\n                    clearButtonProps?.onClick?.(event);\n                  }}\n                  onMouseDown={(event) => {\n                    event.preventDefault();\n                    clearButtonProps?.onMouseDown?.(event);\n                  }}\n                />\n              ))\n            }\n            labelProps={{ htmlFor: hoursInputId, ...labelProps }}\n            style={style}\n            className={className}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            __staticSelector=\"TimePicker\"\n            {...others}\n          >\n            <div {...getStyles('fieldsRoot')} dir=\"ltr\">\n              <div {...getStyles('fieldsGroup')} onBlur={handleBlur}>\n                <SpinInput\n                  id={hoursInputId}\n                  {...hoursInputProps}\n                  {...getStyles('field', {\n                    className: hoursInputProps?.className,\n                    style: hoursInputProps?.style,\n                  })}\n                  value={controller.values.hours}\n                  onChange={controller.setHours}\n                  onNextInput={() => controller.focus('minutes')}\n                  min={format === '12h' ? 1 : 0}\n                  max={format === '12h' ? 12 : 23}\n                  focusable\n                  step={hoursStep!}\n                  ref={_hoursRef}\n                  aria-label={hoursInputLabel}\n                  readOnly={readOnly}\n                  disabled={disabled}\n                  onPaste={controller.onPaste}\n                  onFocus={(event) => {\n                    handleFocus(event);\n                    hoursInputProps?.onFocus?.(event);\n                  }}\n                />\n                <span>:</span>\n                <SpinInput\n                  {...minutesInputProps}\n                  {...getStyles('field', {\n                    className: minutesInputProps?.className,\n                    style: minutesInputProps?.style,\n                  })}\n                  value={controller.values.minutes}\n                  onChange={controller.setMinutes}\n                  min={0}\n                  max={59}\n                  focusable\n                  step={minutesStep!}\n                  ref={_minutesRef}\n                  onPreviousInput={() => controller.focus('hours')}\n                  onNextInput={() =>\n                    withSeconds ? controller.focus('seconds') : controller.focus('amPm')\n                  }\n                  aria-label={minutesInputLabel}\n                  tabIndex={-1}\n                  readOnly={readOnly}\n                  disabled={disabled}\n                  onPaste={controller.onPaste}\n                  onFocus={(event) => {\n                    handleFocus(event);\n                    minutesInputProps?.onFocus?.(event);\n                  }}\n                />\n\n                {withSeconds && (\n                  <>\n                    <span>:</span>\n                    <SpinInput\n                      {...secondsInputProps}\n                      {...getStyles('field', {\n                        className: secondsInputProps?.className,\n                        style: secondsInputProps?.style,\n                      })}\n                      value={controller.values.seconds}\n                      onChange={controller.setSeconds}\n                      min={0}\n                      max={59}\n                      focusable\n                      step={secondsStep!}\n                      ref={_secondsRef}\n                      onPreviousInput={() => controller.focus('minutes')}\n                      onNextInput={() => controller.focus('amPm')}\n                      aria-label={secondsInputLabel}\n                      tabIndex={-1}\n                      readOnly={readOnly}\n                      disabled={disabled}\n                      onPaste={controller.onPaste}\n                      onFocus={(event) => {\n                        handleFocus(event);\n                        secondsInputProps?.onFocus?.(event);\n                      }}\n                    />\n                  </>\n                )}\n\n                {format === '12h' && (\n                  <AmPmInput\n                    {...amPmSelectProps}\n                    inputType={withDropdown ? 'input' : 'select'}\n                    labels={amPmLabels!}\n                    value={controller.values.amPm}\n                    onChange={controller.setAmPm}\n                    ref={_amPmRef}\n                    aria-label={amPmInputLabel}\n                    onPreviousInput={() =>\n                      withSeconds ? controller.focus('seconds') : controller.focus('minutes')\n                    }\n                    readOnly={readOnly}\n                    disabled={disabled}\n                    tabIndex={-1}\n                    onPaste={controller.onPaste}\n                    onFocus={(event) => {\n                      handleFocus(event);\n                      amPmSelectProps?.onFocus?.(event);\n                    }}\n                  />\n                )}\n              </div>\n            </div>\n\n            <input\n              type=\"hidden\"\n              name={name}\n              form={form}\n              value={controller.hiddenInputValue}\n              {...hiddenInputProps}\n            />\n          </InputBase>\n        </Popover.Target>\n        <Popover.Dropdown\n          {...getStyles('dropdown')}\n          onMouseDown={(event) => event.preventDefault()}\n        >\n          {presets ? (\n            <TimePresets\n              value={controller.hiddenInputValue}\n              onChange={controller.setTimeString}\n              format={format!}\n              presets={presets}\n              amPmLabels={amPmLabels!}\n              withSeconds={withSeconds || false}\n            />\n          ) : (\n            <div {...getStyles('controlsListGroup')}>\n              <TimeControlsList\n                min={format === '12h' ? 1 : 0}\n                max={format === '12h' ? 12 : 23}\n                step={hoursStep!}\n                value={controller.values.hours}\n                onSelect={controller.setHours}\n              />\n              <TimeControlsList\n                min={0}\n                max={59}\n                step={minutesStep!}\n                value={controller.values.minutes}\n                onSelect={controller.setMinutes}\n              />\n              {withSeconds && (\n                <TimeControlsList\n                  min={0}\n                  max={59}\n                  step={secondsStep!}\n                  value={controller.values.seconds}\n                  onSelect={controller.setSeconds}\n                />\n              )}\n              {format === '12h' && (\n                <AmPmControlsList\n                  labels={amPmLabels!}\n                  value={controller.values.amPm}\n                  onSelect={controller.setAmPm}\n                />\n              )}\n            </div>\n          )}\n        </Popover.Dropdown>\n      </Popover>\n    </TimePickerProvider>\n  );\n});\n\nTimePicker.displayName = '@mantine/dates/TimePicker';\nTimePicker.classes = classes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}